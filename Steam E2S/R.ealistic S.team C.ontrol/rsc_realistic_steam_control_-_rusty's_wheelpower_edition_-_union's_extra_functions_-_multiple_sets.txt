@name RSC Realistic Steam Control - Rusty's Wheelpower Edition - Union's Extra Functions - Multiple Sets
@inputs Ignite ReverserF ReverserB Increase Decrease ApplyBrake Damper AddCoal AddWater Drivers:array PwrDriver:entity PwrDriver2:entity
@inputs WaterIn CoalIn SteamSubtract
@outputs Active Warmup MPH KPH V Rot Reverser R8 Throttle Brake Coal Water Steam Temp Cocks Firebox:vector CPU FuelIn CONSTANT Force OM
@outputs MaxWater MaxCoal WaterIn CoalIn Safties
@persist [E O B]:entity Mul Band BrakeMul [Idle Fire Wheels Coaling Injector InjectorOff Chuff1 Chuff2 Chuff3 Chuff4 ChuffLOOP]:string Fireman 
@persist ShovelRate BurnRate InjectRate BoilRate HeatRate CN CM Radius ChuffQ DRV Johnson_Bar UseFuel MaxFuel Fuel
@persist  
@trigger 
@model models/beer/wiremod/watersensor.mdl

#Master Version 1.6 - Wheelpower Version 1.4 - Extra Functions 1.2

#[
SETUP INSTRUCTIONS:
0- (You shouldn't have to do this unless you know what you're doing) Configure chip.
1- Slap the e2 on the back of the steamer's baseplate like you've been doing since SLC.
2- Create an ADVANCED Entity Marker and link it to all the locomotive's DRIVER wheels.
3- Wire Drivers[ARRAY] to that entity marker.
4- Wire ReverserF, ReverserB, Increase, Decrease, and ApplyBrake to pod controller keys of your choice. My personal setup is:
    ReverserF - W
    ReverserB - S
    Increase - D
    Decrease - A
    ApplyBrake - Space
5- Wire Ignite to either a pod controller key or a NON-TOGGLED button.
6- If manual fireman mode is desired: wire Damper, AddCoal, and AddWater to either pod controller keys or wire buttons (Can be toggled or non-toggled).
7- Set up screens, gauges, indicators, heiroglyphs, whatever so you can see relevant information like speed, throttle setting, water levels, etc.
The rest of the steps are optional but neat.
8- Put a wire light on the firebox and wire it to Firebox[VECTOR]. It'll glow in accordance with the temperature level!
9- Place some steam jet particle effects on the pistons and wire their corresponding numpad output to the "Cocks" output. I know you saw that and giggled.
When you begin moving the steam locomotive, the jets will puff out a bit of steam for a short while until you reach sufficient velocity.

One last little tip: the "CONSTANT" output is a constant value of 1. Very Handay.

FIREMAN'S GUIDE:
Keep Coal and Water around 100. If you add too much of either, temperature and steam generation gets nerfed.
Keep Temperature and Steam as high as you can. Max is 200.
If your temperature is sinking, use the Damper. It will boost your temperature greatly but will eat a lot more coal.

DRIVER'S GUIDE:
The Reverser increments by 1/4ths from -1 to +1. More extreme reverser values (closer to 1) will give you more starting force but a lower top speed.
As you approach the top of your "power band," you will stop accelerating until you lower the reverser.
Reverser values of 0.125 or -0.125 give you maximum horsepower (and by extension top speed) but you won't get any starting force.

Happy Steaming!
]#

if(first()|dupefinished()){
    
    Mul = 7500 #The General Force Multiplier, determines pulling power. 2200 is a good value.
    Band = 180 #The "Power Band." The (Highly Idealized) speed range (in MPH) over which you can go before you need to reduce the reverser value.
    #In Practice it's closer to Half what you have here. 30 is a good value.
    BrakeMul = 3500 #The Braking force multiplier, independent of the trainline airbrakes. 400 is a good value.
    
    Fireman = 1 #If 0, automatic fireman. If 1, fireman is required. #If 1, the locomotive will consume fuel. If 0, the locomotive will not consume fuel. Simple, right?
    DRV = 0 #If 1, you get 2x more reverser positions. If 0, you still only get 3 in either direction.
    Johnson_Bar = 0 #If 1, reverser will behave like a Johnson Bar reverser. If 0, will behave like Walschaerts.
    
    MaxWater = 25000    #The Water Tank Capacity
    MaxCoal = 70000    #The Coal Capacity
    
    #Don't change these unless you absolutely have to
    ShovelRate = 0.5
    InjectRate = 0.5
    BurnRate = 0.001
    HeatRate = 0.05
    BoilRate = 0.025
    
    #Suddenly Sounds! Don't change these unless you know what you're doing.
    Idle = "usa_locomotive_sounds_3/steam/idle/idle11.wav"
    Fire = "usa_locomotive_sounds_3/steam/fire/fire1.wav"
    Wheels = "usa_locomotive_sounds_3/misc/rumble/rumble_3.wav"
    Coaling = "usa_locomotive_sounds_3/steam/stoker/stoker2.wav"
    Injector = "usa_locomotive_sounds_3/steam/injector/injector3loop.wav"
    Injector_Off = "usa_locomotive_sounds_3/steam/injector/injector3end.wav"
    #Safties = "usa_locomotive_sounds/steam_engine_sounds/steam_engine2/safeties.wav"
    
    Chuff1 = "usa_locomotive_sounds_3/steam/chuff/gs4/chuffhi/sp4449_ch_c1t1_hi.wav"
    Chuff2 = "usa_locomotive_sounds_3/steam/chuff/gs4/chuffhi/sp4449_ch_c1t2_hi.wav"
    Chuff3 = "usa_locomotive_sounds_3/steam/chuff/gs4/chuffhi/sp4449_ch_c1t3_hi.wav"
    Chuff4 = "usa_locomotive_sounds_3/steam/chuff/gs4/chuffhi/sp4449_ch_c1t4_hi.wav"
    ChuffLOOP = "usa_locomotive_sounds_3/steam/chuff/gs4/gx_speedmed.wav"
    
    Radius = 72 #Wheel Radius, in Source Units. This is important for sound calculations!

    #End of Config
    
    Coal & Water == Fuel       
    CN = 1
    CM = 5
    ChuffQ = 0
    Active = Warmup = 0
    if(Fireman){
        Coal = Water = 50 #50
        Temp = Steam = 0 #0
    }else{
        Coal = Steam = Temp = Water = 200
    }
    Cocks = 0
    Throttle = Brake = Reverser = 0
    SwapQ = DQ = WQ = CQ = 0
    CONSTANT = 1
    
    E = entity()
    B = E:isWeldedTo()
    O = owner()
    runOnChat(1)
    function void abHard(){
        B:propPhysicalMaterial("phx_tire_normal")
        local C = B:getConstraints()
        timer("drivercheck",50)
        #for(N=1,C:count()){
        #    C[N,entity]:propPhysicalMaterial("phx_tire_normal")
        #}
        
    }
    function void abSoft(){
        B:propPhysicalMaterial("ice")
        local C = B:getConstraints()
        for(N=1,C:count()){
            C[N,entity]:propPhysicalMaterial("ice")
        }
        timer("drivercheck",50)
        #for(N=1,Drivers:count()){
        #    Drivers[N,entity]:propPhysicalMaterial("phx_tire_normal")
        #}
    }
    function void abRelease(){
        B:propPhysicalMaterial("gmod_ice")
        local C = B:getConstraints()
        for(N=1,C:count()){
            C[N,entity]:propPhysicalMaterial("gmod_ice")
        }
        timer("drivercheck",50)
        #for(N=1,Drivers:count()){
        #    Drivers[N,entity]:propPhysicalMaterial("phx_tire_normal")
        #}
    }
    if(Fireman){
        timer("heartbeat",500)
    }
    timer("Chuff",100)
    #[
    Sound Index Table:
    0 Idle/WarmupFire
    1 Chuff Loop
    2 Wheels
    3 Coaling
    4 Injectors
    5 \
    6  > Discrete Chuffs
    7 /
    ]#
}
interval(20)

#========Synchronous
if(clk("interval")){
    
    #Warmup
    if(Warmup){
        if(Steam >= 200){
            Active = 1
            Warmup = 0
            soundPlay(0,0,Idle)
            soundPlay(2,0,Wheels)
            soundPitch(2,0)
            soundPitch(1,0)
            
        }
    }elseif(Active){
    #Running
    
        #Throttle
        if(Increase|Decrease){
            Throttle += (0.25)*(Increase-Decrease)
            Throttle = clamp(Throttle,0,10)
        }
        #Velocity Info
        V = -E:velL():z()
        Spd = abs(V)
        MPH = abs(toUnit("mph",V))
        Rot = 2*pi()*Radius*(PwrDriver:angVel():pitch()/6)/120
        KPH = abs(toUnit("km/h",V))
        
        #Cylinder Cocks
        Cocks = (Throttle > 0)&(MPH < 3)
        
        #Wheel Sounds
        soundPitch(2,100*(MPH/Band))
        
        #Chuff Sound Selection
        #Chuff Sound Modulation
        
        #Force Application
        
        
        local Dir = -E:up()
        local HB = Band/2
        local MV = MPH*sign(V)
        if(Johnson_Bar){
            RShift = 2*HB*Reverser
        }else{
            RShift = 2*(Reverser!=0)*(Reverser >= 0 ? (1 - Reverser) : (-1 - Reverser))*HB
        }
        LB = RShift - HB
        UB = LB + Band
        if((MV > LB)&(MV < UB)&(Reverser!=0)){
            
            Force = (Fireman ? 1 : 1.5)*(Johnson_Bar ? 2 : 1)*(Steam/100)*200*(sign(Reverser)*(1+abs(Reverser)))*Throttle*Mul*((MV - HB - RShift)*(MV + HB - RShift)*(-1/(HB^2))) - BrakeMul*Brake*V
        }else{
            Force = 0
        }
        
        
         PwrDriver:applyAngForce(ang(Force, 0, 0))
         PwrDriver2:applyAngForce(ang(Force, 0, 0))
    }else{
    #Off
        Cocks = 0
    }
    
}else{
#========Asynchronous
    #Ignition
    if(Ignite & ~Ignite){
        if(Active|Warmup){
            Warmup = Active = 0
            Reverser = Throttle = 0
            Coal = Water = Fireman ? 50 : 100
            Temp = Steam = Fireman ? 0 : 100
            soundStop(0)
            soundStop(1)
            soundStop(2)
            Firebox = vec()
        }else{
            if(Fireman){
                
                Warmup = 1
                soundPlay(0,0,Fire)
            }else{
                Firebox = vec(255,Temp,(Temp > 100)*(Temp - 100))
                Active = 1
                Warmup = 0
                soundPlay(0,0,Idle)
                soundPlay(2,0,Wheels)
                soundPitch(2,0)
                soundPitch(1,0)
            }
        }
    }
    
    #Controls
    if(~ReverserF | ~ReverserB){
        Reverser += (DRV ? 0.125 : 0.25)*(ReverserF - ReverserB)
        Reverser = clamp(Reverser,-1,1)
        R8 = Reverser*8
    }
    if(ApplyBrake & ~ApplyBrake){
        Brake = !Brake
        local Hard = abs(V)<5
        if(Brake & Hard){
            abHard()
        }elseif(Brake & !Hard){
            abSoft()
        }else{
            abRelease()
        }
    }
    #Fireman Controls
    if(Fireman){
        if(~AddCoal){
            if(AddCoal){
                soundPlay(3,0,Coaling)
            }else{
                soundStop(3)
            }
            
        }
        if(~AddWater){
            if(AddWater){
                soundPlay(4,0,Injector)
                soundVolume(4,0.5)
            }else{
                soundPlay(4,3,InjectorOff)
                soundVolume(4,0.5)
            }
        }
    }
}
if(clk("heartbeat") & Fireman){
#========Fireman Heartbeat
if(MaxCoal  == 0) {
    AddCoal = 0
    soundStop(3)
}else
{
    Coal += AddCoal*ShovelRate - BurnRate*(1+ 3*Damper)*(Active|Warmup)
    Coal = clamp(Coal,0,1500)
}
if(Coal >= 1500){
    AddCoal = 0
}
else{
    Coal += AddCoal*ShovelRate - BurnRate*(1+ 3*Damper)*(Active|Warmup)
    Coal = clamp(Coal,0,1500)
}
if(MaxWater  == 0) {
    AddWater = 0
    Water -= (Temp > 75)*BoilRate*(Temp/100)*(Active|Warmup)*0.5
    Water = clamp(Water,0,1500)
    soundStop(4)
}else
{
    Water += AddWater*InjectRate - (Temp > 75)*BoilRate*(Temp/100)*(Active|Warmup)*0.5
    Water = clamp(Water,0,500)
}
    
    MaxCoal -= AddCoal*ShovelRate
    MaxCoal += CoalIn
    MaxCoal = clamp(MaxCoal,0,MaxCoal)
    
    MaxWater -= AddWater*InjectRate
    MaxWater += WaterIn
    MaxWater = clamp(MaxWater,0,MaxWater)
    
    Temp += (((Coal - 1500)*(Coal))/(-10000) - 0.875*!Damper - BoilRate*(Temp > 75)*(1))*HeatRate*(Active|Warmup)
    Temp = clamp(Temp,0,200)
    
if(SteamSubtract){
    Steam -= SteamSubtract
}else{
    Steam += (Temp > 75)*(Temp/100)*(Water - 500)*(Water)/(-10000) - (Throttle/3.5)*(abs(Reverser)) - AddWater*InjectRate
    Steam = clamp(Steam,0,400)
}
    
    Firebox = vec(255,Temp,(Temp > 100)*(Temp - 100))*(Active|Warmup)
    
    
    
    if(Active & Steam < 75){
        Active = 0
        Warmup = 1
        Throttle = 0
        soundPlay(0,0,Fire)
        soundStop(1)
        soundStop(2)
    }
    timer("heartbeat",500)
    #print("Heartbeat")

}
if(clk("Chuff")){
    #Chuff
    #print("Chuff")
    if(Active & (toUnit("mi/h",abs(Rot)) > 1)){
        local MS = toUnit("m/s",abs(Rot))
        Omega = MS/Radius
        local Int = floor(4*pi()/Omega)
        if(Int > 150){
            if(ChuffQ){ChuffQ = 0, soundStop(1)}
            timer("Chuff",Int)
            local Chf = Int > 300 ? Chuff1:replace("1",CN:toString()) : Chuff2:replace("1",CN:toString())  Chuff3:replace("1",CN:toString())  Chuff4:replace("1",CN:toString())
            soundPlay(CM,0,Chf)
            soundVolume(CM,(Throttle/8))
            CN++
            CM++
            if(CN==5){CN=1}
            if(CM==8){CM=5}
        }else{
            if(!ChuffQ){
                ChuffQ = 1
                soundPlay(1,0,ChuffLOOP)
                
            }
            OM = 600*Omega
            soundPitch(1,OM)
            soundVolume(1,Throttle/8)
            timer("Chuff",100)
        }
    }else{
        soundStop(1)
        timer("Chuff",100)
    }
       
}
#Wheel Slide Fix
if(clk("drivercheck")){
    for(N=1,Drivers:count()){
        Drivers[N,entity]:propPhysicalMaterial("rubber")
    }
}
#========Chat
if(chatClk(O)){
    local LS = O:lastSaid()
    local Sentence = LS:explode(" ")
    local CMD = Sentence[1,string]
    local ARG = Sentence[2,string]
    
    if(Active){
        #Engine On Commands
        if(CMD==".throttle"){
            hideChat(1)
            Throttle = clamp(ARG:toNumber(),0,10)
            printColor(vec(200),"[RSC] Setting Throttle to ",vec(255),Throttle:toString()+"/10")
        }
        if(CMD==".reverser"){
            hideChat(1)
            local Val = (1+DRV)*4
            Reverser = round(clamp(ARG:toNumber()*Val,-Val,Val))/Val
            printColor(vec(200),"[RSC] Setting Reverser to ",vec(255),Reverser:toString())
            R8 = Reverser*8
        }
        if(CMD==".brake"){
            hideChat(1)
            if(ARG=="1"){
                Brake = 1
                Throttle = 0
                abSoft()
                printColor(vec(200),"[RSC] Airbrakes ",vec(255,191,0),"Applied")
            }elseif(ARG=="0"){
                Brake = 0
                abRelease()
                printColor(vec(200),"[RSC] Airbrakes ",vec(0,200,0),"Released")
            }else{
                Brake = 1
                Throttle = 0
                abHard()
                printColor(vec(200),"[RSC] Airbrakes ",vec(255,0,0),"EMERGENCY")
            }
        }
        
        
    }else{
        #Engine Off Commands
        if(CMD==".fireman"){
            hideChat(1)
            Fireman = ARG:toNumber()
            if(Fireman){
                timer("heartbeat",100)
                Coal = Water = 50
                Temp = Steam = 0
                printColor(vec(200),"[RSC] Manual Fireman ",vec(0,200,0),"Enabled")
            }else{
                
                Coal = Steam = Temp = Water = 100
                printColor(vec(200),"[RSC] Manual Fireman ",vec(200,0,0),"Disabled")
            }
        }
    }
    #Anytime Commands
    if(CMD==".ignite"){
        hideChat(1)
        if(ARG:toNumber()){
            if(Fireman){
                
                Warmup = 1
                soundPlay(0,0,Fire)
                printColor(vec(200),"[RSC] Warming Up")
            }else{
                Active = 1
                Warmup = 0
                Firebox = vec(255,Temp,(Temp > 100)*(Temp - 100))
                soundPlay(0,0,Idle)
                soundPlay(2,0,Wheels)
                soundPitch(2,0)
                soundPitch(1,0)
                printColor(vec(200),"[RSC] Boiler On")
            }
        }else{
            Warmup = Active = 0
            Reverser = Throttle = 0
            Coal = Water = Fireman ? 50 : 100
            Temp = Steam = Fireman ? 0 : 100
            Cocks = 0
            soundStop(0)
            soundStop(1)
            soundStop(2)
            printColor(vec(200),"[RSC] Boiler Off")
            Firebox = vec()
        }
        
    }
    if(CMD==".mul"){
        hideChat(1)
        Mul = ARG:toNumber()
        printColor(vec(200),"[RSC] Force Mul set to ",vec(0,0,255),Mul:toString())
    }
    if(CMD==".band"){
        hideChat(1)
        Band = ARG:toNumber()
        printColor(vec(200),"[RSC] 'Power Band' set to ",vec(0,0,255),Band:toString()+" MPH")
    }
    if(CMD==".brakemul"){
        hideChat(1)
        BrakeMul = ARG:toNumber()
        printColor(vec(200),"[RSC] Braking Mul set to ",vec(0,0,255),BrakeMul:toString())
    }
    if(CMD==".coal"){
            hideChat(1)
            if(Fireman){
                Coal = clamp(ARG:toNumber(),0,200)
                printColor(vec(200),"[RSC] Coal Level set to ",vec(36),Coal:toString()+"%")
            }else{
                printColor(vec(200),"[RSC] Manual Fireman Mode is currently Disabled")
            }
        }
        if(CMD==".water"){
            hideChat(1)
            if(Fireman){
                Water = clamp(ARG:toNumber(),0,200)
                printColor(vec(200),"[RSC] Water Level set to ",vec(36),Water:toString()+"%")
            }else{
                printColor(vec(200),"[RSC] Manual Fireman Mode is currently Disabled")
            }
        }
        if(CMD==".temp"){
            hideChat(1)
            if(Fireman){
                Temp = clamp(ARG:toNumber(),0,200)
                printColor(vec(200),"[RSC]Temperature set to ",vec(36),Temp:toString()+"%")
            }else{
                printColor(vec(200),"[RSC] Manual Fireman Mode is currently Disabled")
            }
        }
        if(CMD==".steam"){
            hideChat(1)
            if(Fireman){
                Steam = clamp(ARG:toNumber(),0,200)
                printColor(vec(200),"[RSC] Steam Pressure set to ",vec(36),Steam:toString()+"%")
            }else{
                printColor(vec(200),"[RSC] Manual Fireman Mode is currently Disabled")
            }
        }
        if(CMD==".commands"){
            hideChat(1)
            printColor(vec(200),"[RSC] Commands List (Type .help <command name> for details)\nACTIVE: .throttle .reverser .brake\nINACTIVE: .fireman\nANYTIME: .ignite .mul .band .brakemul .coal .water .temp .steam")
        }
        if(CMD==".help"){
            hideChat(1)
            switch(ARG){
                case "throttle",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".throttle\n",vec(200),"Syntax: ",vec(255,96,0),".throttle [number]\n",vec(200),"Description: ",vec(255,96,0),"Overrides the throttle setting to this value out of 10\n",vec(200),"Example: ",vec(255,96,0),".throttle 5")
                    break
                case "reverser",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".reverser\n",vec(200),"Syntax: ",vec(255,96,0),".reverser [number]\n",vec(200),"Description: ",vec(255,96,0),"Overrides the reverser setting to this value from -1 to +1\n",vec(200),"Example: ",vec(255,96,0),".reverser 0.25")
                    break
                case "brake",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".brake\n",vec(200),"Syntax: ",vec(255,96,0),".brake [boolean]\n",vec(200),"Description: ",vec(255,96,0),"1 applies, 0 releases. Leave blank for Emergency Brake.\n",vec(200),"Example: ",vec(255,96,0),".brake 1")
                    break
                case "ignite",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".ignite\n",vec(200),"Syntax: ",vec(255,96,0),".ignite [boolean]\n",vec(200),"Description: ",vec(255,96,0),"1 Ignites the fire, 0 extinguishes it.\n",vec(200),"Example: ",vec(255,96,0),".ignite 1")
                    break
                case "fireman",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".fireman\n",vec(200),"Syntax: ",vec(255,96,0),".fireman [boolean]\n",vec(200),"Description: ",vec(255,96,0),"Sets Manual Fireman Mode to this value.\n",vec(200),"Example: ",vec(255,96,0),".fireman 1")
                    break
                case "mul",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".mul\n",vec(200),"Syntax: ",vec(255,96,0),".mul [number]\n",vec(200),"Description: ",vec(255,96,0),"Sets the Force multiplier to this value.\n",vec(200),"Example: ",vec(255,96,0),".mul 120")
                    break
                case "band",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".band\n",vec(200),"Syntax: ",vec(255,96,0),".band [number]\n",vec(200),"Description: ",vec(255,96,0),"Sets the (Ideal) Speed band before you need to lower reverser setting.\n",vec(200),"Example: ",vec(255,96,0),".band 30")
                    break
                case "brakemul",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".brakemul\n",vec(200),"Syntax: ",vec(255,96,0),".brakemul [number]\n",vec(200),"Description: ",vec(255,96,0),"Sets the Independent Brake force Multiplier\n",vec(200),"Example: ",vec(255,96,0),".brakemul 400")
                    break
                case "coal",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".coal\n",vec(200),"Syntax: ",vec(255,96,0),".coal [number]\n",vec(200),"Description: ",vec(255,96,0),"Sets the Coal Level out of 200.\n",vec(200),"Example: ",vec(255,96,0),".coal 100")
                    break
                case "water",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".water\n",vec(200),"Syntax: ",vec(255,96,0),".water [number]\n",vec(200),"Description: ",vec(255,96,0),"Sets the Water Level out of 200.\n",vec(200),"Example: ",vec(255,96,0),".water 100")
                    break
                case "temp",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".temp\n",vec(200),"Syntax: ",vec(255,96,0),".temp [number]\n",vec(200),"Description: ",vec(255,96,0),"Sets the Temperature Level out of 200.\n",vec(200),"Example: ",vec(255,96,0),".temp 100")
                    break
                case "steam",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".steam\n",vec(200),"Syntax: ",vec(255,96,0),".steam [number]\n",vec(200),"Description: ",vec(255,96,0),"Sets the Steam Pressure Level out of 200.\n",vec(200),"Example: ",vec(255,96,0),".steam 100")
                    break
                default,
                    printColor(vec(200),"[RSC] Command not found. Type .commands for a list of commands.")
                    break
            }
        }
    
}
CPU = floor(cpuUsage()*1000000)
