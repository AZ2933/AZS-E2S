@name Jazzlok Engine Control Panel
@inputs Storage_Battery_Charge Start Stop StartRun HeadlightCRTL Lube_Warn Eng_Run_Pos
@persist A Charge_A  Start_A Stop_A StartRun_A USelect_A HeadlightCRTL_A USelect_C HeadlightCRTL_C Start_Engine Delay TDelay Fuel_Warn Lube_Warn 
@outputs Start_Engine Pre_Start Eng_Run_Pos Delay
@model models/jazzie/trains/locomotives/emd/cab/emd_control_panel1.mdl


if(first() | dupefinished())
{        
    A = 1
    holoCreate(A)
    holoParent(A,entity())
    holoModel(A, "models/jazzie/trains/gauges/pointer_02.mdl")
    holoScale(A,vec(0.41))
    holoColor(A,vec(255,200,0))
    holoPos(A,entity():toWorld(vec(-0.28,-2.5,0.6)))
    holoAng(A,entity():toWorld(ang(0,0,0)))    
    
    A = 2
    holoCreate(A)
    holoParent(A,entity())
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/control_panel_button1.mdl")
    holoScale(A,vec(1))
    holoColor(A,vec(50,250,0))
    holoMaterial(A,"wtp/paint_1")
    holoPos(A,entity():toWorld(vec(-4.95,-4.45,0.85)))
    holoAng(A,entity():toWorld(ang(0,0,0)))      

    A = 3
    holoCreate(A)
    holoParent(A,entity())
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/control_panel_button1.mdl")
    holoScale(A,vec(1))
    holoColor(A,vec(250,30,0))
    holoMaterial(A,"wtp/paint_1")
    holoPos(A,entity():toWorld(vec(-6.85,-4.45,0.85)))
    holoAng(A,entity():toWorld(ang(0,0,0)))      
    
    A = 4
    holoCreate(A)
    holoParent(A,entity())
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/control_panel_switch1.mdl")
    holoPos(A,entity():toWorld(vec(-5.65,2.5,0.2)))
    holoAng(A,entity():toWorld(ang(0,180,0)))     
    
    A = 5
    holoCreate(A)
    holoParent(A,entity())
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/control_panel_switch1.mdl")
    holoPos(A,entity():toWorld(vec(-0.22,2.5,0.2)))
    holoAng(A,entity():toWorld(ang(0,180,0)))    
    
    A = 6
    holoCreate(A)
    holoParent(A,entity())
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/control_panel_switch1.mdl")
    holoPos(A,entity():toWorld(vec(5.2,2.5,0.2)))
    holoAng(A,entity():toWorld(ang(0,180,0)))    
    
    A = 7
    holoCreate(A)
    holoParent(A,entity())
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/control_panel_button1.mdl")
    holoScale(A,vec(1))
    holoColor(A,vec(250,60,0) * 0.1)
    holoMaterial(A,"wtp/paint_1")
    holoPos(A,entity():toWorld(vec(-9.85,-4.45,0.5)))
    holoAng(A,entity():toWorld(ang(0,0,0)))      

    A = 8
    holoCreate(A)
    holoParent(A,entity())
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/control_panel_button1.mdl")
    holoScale(A,vec(1))
    holoColor(A,vec(250,60,0) * 0.1)
    holoMaterial(A,"wtp/paint_1")
    holoPos(A,entity():toWorld(vec(-11.93,-4.45,0.5)))
    holoAng(A,entity():toWorld(ang(0,0,0)))    
}

if((Start & ~Start) & !StartRun & !Fuel_Warn)
{
    TDelay = !TDelay
}

if(TDelay)
{
    Delay++
}

if(Delay > 75)
{
    Delay = 100
    Start_Engine = 1
    soundStop("alarm",1)
}

if(Delay > 30)
{
    Trigger = 1
}
else
{
    Trigger = 0
}


if(Stop)
{
    TDelay = 0
    Delay = 0
    Start_Engine = 0
}

if((changed(TDelay) & TDelay) & Fuel_Warn)
{
    soundPlay("alarm",0,"_jazzlok/switches/bell_02.wav")
    soundPitch("alarm",90)
    soundStop("alarm",2)
}


if((changed(TDelay) & TDelay) & !Fuel_Warn)
{
    soundPlay("alarm",0,"_jazzlok/switches/eng_start_bell.wav")
    soundPitch("alarm",100)
    soundStop("alarm",5)
}
    
if((changed(Trigger) & Trigger) & !Fuel_Warn)
{
    soundPlay("Trigger",0,"_jazzlok/diesel_engines/emd_engines/engine_trigger.wav")
    soundStop("Trigger",40)
}
    
if(changed(HeadlightCRTL) | changed(StartRun) )
{
    soundPlay("switch",0,"_jazzlok/switches/switch_heavy_02.wav")
    soundPitch("switch",175)
    soundStop("switch",0.15)
}

if(changed(Start) | changed(Stop) )
{
    soundPlay("switch2",0,"_jazzlok/switches/switch_med_03.wav")
    soundPitch("switch2",150)
    soundStop("switch2",0.25)
}
if(Lube_Warn & Start_Engine)
{
    holoColor(A,vec(250,60,0))
}
else
{
    holoColor(A,vec(250,60,0) * 0.1)
}

interval(100)

Charge_A = Charge_A + ( Storage_Battery_Charge - Charge_A ) /  max( 10, 0 )   
holoAng(1,entity():toWorld(ang(0,-90-Charge_A * 1.04,0)))

Start_A = Start_A + ( Start - Start_A ) /  max( 2, 0 )  
holoPos(2,entity():toWorld(vec(-4.95,-4.45,0.85 - (Start_A / 2) )))

Stop_A = Stop_A + ( Stop - Stop_A ) /  max( 2, 0 )  
holoPos(3,entity():toWorld(vec(-6.85,-4.45,0.85 - (Stop_A / 2) )))

StartRun_A = StartRun_A + ( StartRun - StartRun_A ) /  max( 4, 0 )  
holoAng(4,entity():toWorld(ang(0,180-StartRun_A * 180,0)))


if(HeadlightCRTL & ~HeadlightCRTL)
{
    HeadlightCRTL_C++
}
if(HeadlightCRTL_C >= 4)
{
    HeadlightCRTL_C = 0
}

HeadlightCRTL_A = HeadlightCRTL_A + ( HeadlightCRTL_C - HeadlightCRTL_A ) /  max( 4, 0 )  
holoAng(6,entity():toWorld(ang(0,180-HeadlightCRTL_A * 90,0)))




