@name 4-6-4 H1 
@inputs Reverser Base:entity LeadFWheel:entity LeadBWheel:entity
@persist Base:entity Holo HolosSpawned RodRadius Speed WheelRotation Wheel_F Wheel_M Wheel_B

@persist LiftingArm LiftingArm_B LiftingArm_C LiftingArm_D LiftingArm_D_2 MainExpansionLink_L MainExpansionLink_R Wheel_1 Wheel_2 Wheel_3 Wheel_4 Wheel_5 

@persist SideRod_L MainRod_L Crosshead_L EccentricCrank_L EccentricRod_L ExpansionPlate_L ExpansionRodBottom_L ExpansionRodTop_L EccentricRodEnd_L
@persist UnionLink_L Combination_L CombinationEnd_L ValveStem_L ValveRod_L ExpansionLink_L LiftingLink_L LiftingLinkEnd_L Gearlifting_L

@persist SideRod_R MainRod_R Crosshead_R EccentricCrank_R EccentricRod_R ExpansionPlate_R ExpansionRodBottom_R ExpansionRodTop_R 
@persist UnionLink_R Combination_R CombinationEnd_R ValveStem_R ValveRod_R ExpansionLink_R LiftingLink_R LiftingLinkEnd_R Gearlifting_R

@trigger ReverserChanged Reverser
if(dupefinished()){reset()}
if(first() | duped()) {
    
    RodMaterial = "sprops/textures/sprops_metal4"
    RodColor = vec(218)
    RodRadius = 18.5
    ParentScale = 0.4
    
    #Driving Wheels
    Holo = 1
    holoCreate(Holo, Base:toWorld(vec(96,0,0)), vec(1), Base:toWorld(ang(0,0,0)))
    holoModel(Holo, "models/bobsters_trains/wheels/standard/wheel_84_double.mdl")
    holoBodygroup(Holo, 1, 5) holoColor(Holo, vec(31)) holoSkin(Holo, 0) 
    holoEntity(Holo):setSubMaterial(1, "WTP/metal_2")
    holoEntity(Holo):setSubMaterial(2, "WTP/metal_2")
    holoParent(Holo, Base)
    Wheel_F = Holo
    Holo++
    holoCreate(Holo, Base:toWorld(vec(0,0,0)), vec(1), Base:toWorld(ang(0,0,0)))
    holoModel(Holo, "models/bobsters_trains/wheels/standard/wheel_84_double.mdl")
    holoBodygroup(Holo, 1, 5) holoColor(Holo, vec(31)) holoSkin(Holo, 0) 
    holoEntity(Holo):setSubMaterial(1, "WTP/metal_2")
    holoEntity(Holo):setSubMaterial(2, "WTP/metal_2")
    holoParent(Holo, Base)
    Wheel_M = Holo
	   Holo++
    holoCreate(Holo, Base:toWorld(vec(-96,0,0)), vec(1), Base:toWorld(ang(0,0,0)))
    holoModel(Holo, "models/bobsters_trains/wheels/standard/wheel_84_double.mdl")
    holoBodygroup(Holo, 1, 5) holoColor(Holo, vec(31))
    holoEntity(Holo):setSubMaterial(1, "WTP/metal_2")
    holoEntity(Holo):setSubMaterial(2, "WTP/metal_2")
    holoParent(Holo, Base)
    Wheel_B = Holo    
    
    
    
    #Side Rod Left
    Holo++ 
    holoCreate(Holo, Base:toWorld(vec(84.5,0,0)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(Holo, Base) 
    SideRod_L = Holo
    
    #Main Rod Left
    Holo++ 
    holoCreate(Holo, Base:toWorld(vec(0,0,0)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(Holo, Base)
    MainRod_L = Holo
        
    #Crosshead Left
    Holo++ 
    holoCreate(Holo, Base:toWorld(vec(0,0,0)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(Holo, Base)
    Crosshead_L = Holo      
    
    Holo++
    #Left Eccentric crank
    holoCreate(Holo, Base:toWorld(vec(0,65,-RodRadius-6)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(Holo, Wheel_3)
    EccentricCrank_L = Holo
    
    #Left Eccentric Rod
    Holo++
    holoCreate(Holo, Base:toWorld(vec(4.5,68,-2.5)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(Holo, EccentricCrank_L)
    EccentricRod_L = Holo 
    
    #Left Expansion Plate Link
    Holo++
    holoCreate(Holo, Base:toWorld(vec(120,68,35)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(Holo, Base)    
    MainExpansionLink_L = Holo    
    
    #Left Expansion Plate 
    Holo++
    holoCreate(Holo, Base:toWorld(vec(120,68,50)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(Holo, MainExpansionLink_L)    
    ExpansionPlate_L = Holo
    
    #Left Expansion Bottom
    Holo++
    holoCreate(Holo, Base:toWorld(vec(127,66,19)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(Holo, ExpansionPlate_L)
    ExpansionRodBottom_L = Holo    
    
    Holo++
    holoCreate(Holo, Base:toWorld(vec(120,68,50)), vec(1,1,1)*1.2, Base:toWorld(ang(0,-90,0)))
    holoModel(Holo, "models/unionsparts/gearconnectingrod_1.mdl")
    holoMaterial(Holo, RodMaterial) holoColor(Holo, RodColor)
    holoParent(Holo, ExpansionPlate_L)    
    
    
    #Reversing LiftingArm
    Holo++
    holoCreate(Holo, Base:toWorld(vec(120,0,30)), vec(ParentScale), Base:toWorld(ang(0,0,90)))
    holoMaterial(Holo, "") holoColor(Holo, RodColor) holoParent(Holo,Base)
    LiftingArm = Holo               
    Holo++
    holoCreate(Holo, Base:toWorld(vec(120,68,30)), vec(1,1,1)*1.2, Base:toWorld(ang(0,-90,0)))
    holoModel(Holo, "models/unionsparts/reverserlink_c.mdl")
    holoParent(Holo, LiftingArm)
    Holo++
    holoCreate(Holo, Base:toWorld(vec(120,-68,30)), vec(1,1,1)*1.2, Base:toWorld(ang(0,-90,0)))
    holoModel(Holo, "models/unionsparts/reverserlink_c.mdl")
    holoParent(Holo, LiftingArm)
        
    #Reversing LiftingArm_B
    Holo++
    holoCreate(Holo, Base:toWorld(vec(49,0,33)), vec(ParentScale), Base:toWorld(ang(0,0,90)))
    holoMaterial(Holo, "") holoColor(Holo, RodColor) holoParent(Holo,Base)
    LiftingArm_B = Holo               
    Holo++
    holoCreate(Holo, Base:toWorld(vec(49,70,33)), vec(1,1,1)*1.2, Base:toWorld(ang(0,-90,0)))
    holoModel(Holo, "models/unionsparts/reverserlink_a.mdl")
    holoParent(Holo, LiftingArm_B)    
    Holo++
    holoCreate(Holo, Base:toWorld(vec(49,-70,33)), vec(1,1,1)*1.2, Base:toWorld(ang(0,-90,0)))
    holoModel(Holo, "models/unionsparts/reverserlink_a.mdl")
    holoParent(Holo, LiftingArm_B)    
    
    #Reversing LiftingArm_C
    Holo++
    holoCreate(Holo, Base:toWorld(vec(86,70,74.5)), vec(ParentScale), Base:toWorld(ang(0,0,90)))
    holoMaterial(Holo, "") holoColor(Holo, RodColor) holoParent(Holo,Base)
    LiftingArm_C = Holo               
    Holo++
    holoCreate(Holo, Base:toWorld(vec(86,70,74.5)), vec(1,1,1)*1.3, Base:toWorld(ang(0,-90,0)))
    holoModel(Holo, "models/unionsparts/reverserlink_b.mdl")
    holoParent(Holo, LiftingArm_C)       
    Holo++
    holoCreate(Holo, Base:toWorld(vec(86,-70,74.5)), vec(1,1,1)*1.3, Base:toWorld(ang(0,-90,0)))
    holoModel(Holo, "models/unionsparts/reverserlink_b.mdl")
    holoParent(Holo, LiftingArm_C)    
    
    #Reversing LiftingArm_D    
    Holo++
    holoCreate(Holo, Base:toWorld(vec(121.5,68,57)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoMaterial(Holo, "") holoColor(Holo, RodColor) holoParent(Holo,LiftingArm)
    LiftingArm_D = Holo        
    Holo++
    holoCreate(Holo, Base:toWorld(vec(121.5,68,57)), vec(0.6), Base:toWorld(ang(0,90,-90)))
    holoModel(Holo, "models/unionsparts/reverserlink_a.mdl")
    holoParent(Holo, LiftingArm_D)    
    
    #Reversing LiftingArm_D_2
    Holo++
    holoCreate(Holo, Base:toWorld(vec(121.5,-68,57)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoMaterial(Holo, "") holoColor(Holo, RodColor) holoParent(Holo,LiftingArm)
    LiftingArm_D_2 = Holo        
    Holo++
    holoCreate(Holo, Base:toWorld(vec(121.5,-68,57)), vec(0.6), Base:toWorld(ang(0,90,-90)))
    holoModel(Holo, "models/unionsparts/reverserlink_a.mdl")
    holoParent(Holo, LiftingArm_D_2)               


    #Gear Connecting Rod Left
    Holo++
    holoCreate(Holo, Base:toWorld(vec(135-40,70,55)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoMaterial(Holo, "") holoColor(Holo, RodColor) holoParent(Holo,Base)
    Gearlifting_L = Holo         
    Holo++
    holoCreate(Holo, Base:toWorld(vec(135-40,70,55)), vec(1), Base:toWorld(ang(0,90,90)))
    holoModel(Holo, "models/unionsparts/gearconnectingrod_1_2.mdl")
    holoParent(Holo, Gearlifting_L)    holoMaterial(Holo, RodMaterial) holoColor(Holo, RodColor)
    
    #Left Valve Stem
    Holo++
    holoCreate(Holo, Base:toWorld(vec(135,70,55)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(Holo, Base) 
    ValveStem_L = Holo
    Holo++
    holoCreate(Holo, Base:toWorld(vec(135,70,55)), vec(0.6,0.5,0.5), Base:toWorld(ang(0,0,0)))
    holoModel(Holo, "models/bobsters_trains/uk/peckett/w6/main_rod.mdl")
    holoParent(Holo, ValveStem_L)    holoMaterial(Holo, RodMaterial) holoColor(Holo, RodColor)    
    

    #Combination Lever    
    Holo++
    holoCreate(Holo, Base:toWorld(vec(190,70,55)), vec(ParentScale), Base:toWorld(ang(0,180,0)))
    holoParent(Holo, ValveStem_L)
    Combination_L = Holo
    Holo++
    holoCreate(Holo, Base:toWorld(vec(190,70,55)), vec(0.48,0.8,0.5), Base:toWorld(ang(90,0,0)))
    holoModel(Holo, "models/bobsters_trains/uk/peckett/w6/main_rod.mdl")
    holoParent(Holo, Combination_L)    holoMaterial(Holo, RodMaterial) holoColor(Holo, RodColor)   
        
    #Left Combination End 
    Holo++
    holoCreate(Holo, Base:toWorld(vec(190,70,10)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(Holo, Combination_L)
    CombinationEnd_L = Holo    

    #Left Union link
    Holo++
    holoCreate(Holo, Base:toWorld(vec(3,10,0)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(Holo, Crosshead_L) 
    UnionLink_L = Holo    
    Holo++
    holoCreate(Holo, Base:toWorld(vec(3,10,0)), vec(0.22,0.5,0.5), Base:toWorld(ang(0,180,0)))
    holoModel(Holo, "models/bobsters_trains/uk/peckett/w6/main_rod.mdl")
    holoParent(Holo, UnionLink_L)    holoMaterial(Holo, RodMaterial) holoColor(Holo, RodColor)  
    
    #ValveRod
    Holo++
    holoCreate(Holo, Base:toWorld(vec(190,60,45)), vec(ParentScale), Base:toWorld(ang(0,180,0)))
    holoParent(Holo, ValveStem_L)
    ValveRod_L = Holo    
    Holo++
    holoCreate(Holo, Base:toWorld(vec(190,60,45)), vec(0.6,0.5,0.5), Base:toWorld(ang(0,0,0)))
    holoModel(Holo, "models/bobsters_trains/uk/peckett/w6/piston_rod.mdl ")
    holoParent(Holo, ValveRod_L)    holoMaterial(Holo, RodMaterial) holoColor(Holo, RodColor)  
    
    #Side Rod Right
    Holo++ 
    holoCreate(Holo, Base:toWorld(vec(84.5,0,0)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(Holo, Base) 
    SideRod_R = Holo
    Holo++
    holoCreate(Holo, Base:toWorld(vec(86,0,0)), vec(1.4,1.4,1.2), Base:toWorld(ang(0,0,0)))
    holoModel(Holo, "models/bobsters_trains/uk/class03/coupling_rod.mdl") holoMaterial(Holo,RodMaterial)
    holoMaterial(Holo, RodMaterial) holoColor(Holo, RodColor)
    holoParent(Holo, SideRod_R)

    #Main Rod Left
    Holo++ 
    holoCreate(Holo, Base:toWorld(vec(0,0,0)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(Holo, Base)
    MainRod_R = Holo 
    Holo++
    holoCreate(Holo, Base:toWorld(vec(0,0,0)), vec(2.5,0.8,0.8), Base:toWorld(ang(0,180,0)))
    holoModel(Holo, "models/bobsters_trains/uk/class03/crank_rod_l.mdl") holoMaterial(Holo,RodMaterial)
    holoMaterial(Holo, RodMaterial) holoColor(Holo, RodColor)
    holoParent(Holo, MainRod_R)    

    #Crosshead Right
    Holo++ 
    holoCreate(Holo, Base:toWorld(vec(0,0,0)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(Holo, Base)
    Crosshead_R = Holo    
    Holo++
    holoCreate(Holo, Base:toWorld(vec(0,0,0)), vec(2,1,1.2), Base:toWorld(ang(0,0,0)))
    holoModel(Holo, "models/bobsters_trains/uk/peckett/w6/piston.mdl") holoMaterial(Holo,RodMaterial)
    holoMaterial(Holo, RodMaterial) holoColor(Holo, RodColor)
    holoParent(Holo, Crosshead_R)
  
    
    Holo++
    #Right Eccentric crank
    holoCreate(Holo, Base:toWorld(vec(RodRadius,-60,0)), vec(ParentScale), Base:toWorld(ang(33.5,0,0)))
    holoParent(Holo, Wheel_M)
    EccentricCrank_R = Holo
    Holo++
    holoCreate(Holo, Base:toWorld(vec(18,-60,0)), vec(2.5,1.4,1.4), Base:toWorld(ang(0,-90,90)))
    holoModel(Holo, "models/unionsparts/returncrank_1.mdl") holoMaterial(Holo,RodMaterial)
    holoMaterial(Holo, RodMaterial) holoColor(Holo, RodColor)
    holoParent(Holo, EccentricCrank_R)    
    
    #Right Eccentric Rod
    Holo++
    holoCreate(Holo, Base:toWorld(vec(-1.5,-63,4.5)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(Holo, EccentricCrank_R)
    EccentricRod_R = Holo    
    Holo++
    holoCreate(Holo, Base:toWorld(vec(-90,-63,4.5)), vec(2.4,2,1)*0.6, Base:toWorld(ang(0,0,0)))
    holoModel(Holo, "models/bobsters_trains/uk/class03/crank_rod_l.mdl")
    holoMaterial(Holo, RodMaterial) holoColor(Holo, RodColor)
    holoParent(Holo, EccentricRod_R)    
    
    #Right Expansion Plate Link
    Holo++
    holoCreate(Holo, Base:toWorld(vec(120-40,-68,35)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(Holo, Base)    
    MainExpansionLink_R = Holo    
    
    #Right Expansion Plate 
    Holo++
    holoCreate(Holo, Base:toWorld(vec(120-40,-68,50)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(Holo, MainExpansionLink_L)    
    ExpansionPlate_R = Holo
    
    #Right Expansion Bottom
    Holo++
    holoCreate(Holo, Base:toWorld(vec(127-40,-66,19)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(Holo, ExpansionPlate_R)
    ExpansionRodBottom_R = Holo    
    
    Holo++
    holoCreate(Holo, Base:toWorld(vec(120-40,-68,50)), vec(1,1,1)*1.2, Base:toWorld(ang(0,-90,0)))
    holoModel(Holo, "models/unionsparts/gearconnectingrod_1.mdl")
    holoMaterial(Holo, RodMaterial) holoColor(Holo, RodColor)
    holoParent(Holo, ExpansionPlate_R)     
    
    #Gear Connecting Rod Right
    Holo++
    holoCreate(Holo, Base:toWorld(vec(135-40,-66,55)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoMaterial(Holo, "") holoColor(Holo, RodColor) holoParent(Holo,Base)
    Gearlifting_R = Holo         
    Holo++
    holoCreate(Holo, Base:toWorld(vec(135-40,-66,55)), vec(1), Base:toWorld(ang(0,90,90)))
    holoModel(Holo, "models/unionsparts/gearconnectingrod_1_2.mdl")
    holoParent(Holo, Gearlifting_R)    holoMaterial(Holo, RodMaterial) holoColor(Holo, RodColor)
    
    #Right Valve Stem
    Holo++
    holoCreate(Holo, Base:toWorld(vec(45,-70,55)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(Holo, Base) 
    ValveStem_R = Holo
    Holo++
    holoCreate(Holo, Base:toWorld(vec(45,-70,55)), vec(0.6,0.5,0.5), Base:toWorld(ang(0,0,0)))
    holoModel(Holo, "models/bobsters_trains/uk/peckett/w6/main_rod.mdl")
    holoParent(Holo, ValveStem_R)    holoMaterial(Holo, RodMaterial) holoColor(Holo, RodColor)    
    

    #Right Combination Lever    
    Holo++
    holoCreate(Holo, Base:toWorld(vec(190-70,-65,55)), vec(ParentScale), Base:toWorld(ang(0,180,0)))
    holoParent(Holo, ValveStem_R)
    Combination_R = Holo
    Holo++
    holoCreate(Holo, Base:toWorld(vec(190-70,-65,55)), vec(0.48,0.8,0.5), Base:toWorld(ang(90,0,0)))
    holoModel(Holo, "models/bobsters_trains/uk/peckett/w6/main_rod.mdl")
    holoParent(Holo, Combination_R)    holoMaterial(Holo, RodMaterial) holoColor(Holo, RodColor)   
        
    #Right Combination End 
    Holo++
    holoCreate(Holo, Base:toWorld(vec(190-70,-65,15)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(Holo, Combination_R)
    CombinationEnd_R = Holo    

    #Right Union link
    Holo++
    holoCreate(Holo, Base:toWorld(vec(3,-10,0)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(Holo, Crosshead_R) 
    UnionLink_R = Holo    
    Holo++
    holoCreate(Holo, Base:toWorld(vec(3,-10,0)), vec(0.22,0.5,0.5), Base:toWorld(ang(0,180,0)))
    holoModel(Holo, "models/bobsters_trains/uk/peckett/w6/main_rod.mdl")
    holoParent(Holo, UnionLink_R)    holoMaterial(Holo, RodMaterial) holoColor(Holo, RodColor)  
    
    #Right ValveRod
    Holo++
    holoCreate(Holo, Base:toWorld(vec(190-40,-60,45)), vec(ParentScale), Base:toWorld(ang(0,180,0)))
    holoParent(Holo, ValveStem_R)
    ValveRod_R = Holo    
    Holo++
    holoCreate(Holo, Base:toWorld(vec(190-40,-60,45)), vec(0.6,0.5,0.5), Base:toWorld(ang(0,0,0)))
    holoModel(Holo, "models/bobsters_trains/uk/peckett/w6/piston_rod.mdl")
    holoParent(Holo, ValveRod_R)    holoMaterial(Holo, RodMaterial) holoColor(Holo, RodColor)      
    
    Holo++
    holoCreate(Holo, LeadBWheel:toWorld(vec(0,0,30)), vec(4), LeadBWheel:toWorld(ang(0,0,0)))
    holoModel(Holo, "models/bobsters_trains/uk/bogies/class20_mechanical/spring.mdl")
    holoParent(Holo, LeadBWheel)    holoMaterial(Holo, RodMaterial) holoColor(Holo, vec(31,31,31))            
    
    
          
                                                            
    WheelRotation = 90
    function void updateRods(Speed:number) {
        if(Speed != 0) {
            WheelRotation += Speed * 1
            if(WheelRotation > 360) {
                WheelRotation = WheelRotation - 360
            }elseif(WheelRotation < -360) {
                WheelRotation = WheelRotation + 360
            }
            holoAng(Wheel_F, Base:toWorld(ang(WheelRotation,0,0)))
            holoAng(Wheel_M, Base:toWorld(ang(WheelRotation,0,0)))
            holoAng(Wheel_B, Base:toWorld(ang(WheelRotation,0,0)))
            #left
            #main rod
            local MainRodCos = cos(WheelRotation+90)*RodRadius
            local MainRodSin = sin(WheelRotation+90)*RodRadius
            holoPos(SideRod_L, Base:toWorld(vec(0,50,-6) + vec(MainRodCos,0,-MainRodSin)))
            holoPos(MainRod_L, Base:toWorld(vec(0,60,-6) + vec(MainRodCos,0,-MainRodSin)))
            holoPos(Crosshead_L, Base:toWorld(vec(170,60,-6) + vec(MainRodCos,0,0)))
            local Crosshead_Ang = (holoEntity(MainRod_L):pos() - holoEntity(Crosshead_L):pos()):toAngle()
            holoAng(MainRod_L, Crosshead_Ang)
            #expansion plate
            local EccentricCos = cos(WheelRotation-25)*(RodRadius*2)
            holoAng(ExpansionPlate_L, Base:toWorld(ang(-EccentricCos/3,0,0)))
            
            #right
            MainRodCos = cos(WheelRotation)*RodRadius
            MainRodSin = sin(WheelRotation)*RodRadius
            holoPos(SideRod_R, Base:toWorld(vec(0,-50,0) + vec(MainRodCos,0,-MainRodSin)))
            holoPos(MainRod_R, Base:toWorld(vec(0,-55,0) + vec(MainRodCos,0,-MainRodSin)))
            holoPos(Crosshead_R, Base:toWorld(vec(150,-55,0) + vec(MainRodCos,0,0)))
            Crosshead_Ang = (holoEntity(MainRod_R):pos() - holoEntity(Crosshead_R):pos()):toAngle()
            holoAng(MainRod_R, Crosshead_Ang)
            #expansion plate
            EccentricCos = cos(WheelRotation+288)*(RodRadius*1.4)
            holoAng(ExpansionPlate_R, Base:toWorld(ang(-EccentricCos/3,0,0)))
            EccentricRod_Ang = (holoEntity(EccentricRod_R):pos() - holoEntity(ExpansionRodBottom_R):pos()):toAngle()
            holoAng(EccentricRod_R, EccentricRod_Ang)
            MainExpansionLink_Ang = (holoEntity(LiftingArm_D):pos() - holoEntity(MainExpansionLink_L):pos()):toAngle()
            holoAng(LiftingArm_D, MainExpansionLink_Ang)
            MainExpansionLink_Ang_2 = (holoEntity(LiftingArm_D_2):pos() - holoEntity(MainExpansionLink_R):pos()):toAngle()
            holoAng(LiftingArm_D_2, MainExpansionLink_Ang)
        } 
        local ReverserChanged = changed(Reverser)
        if(ReverserChanged | (!ReverserChanged & Speed != 0)) {
            if(ReverserChanged) {
                if(Reverser>0.1){ReverserA=Reverser*-1} if(Reverser<-0.1){ReverserA=Reverser*1}
                local LiftingOffset = -16 * -Reverser 
                holoAng(LiftingArm, Base:toWorld(ang(LiftingOffset,0,90)))
                holoAng(LiftingArm_B, Base:toWorld(ang(LiftingOffset,0,90)))
                holoPos(LiftingArm_C, Base:toWorld(vec(LiftingOffset/1.3+86,70,74+ReverserA)))
                holoPos(MainExpansionLink_L, Base:toWorld(vec(120+-Reverser*4,70,38)))
                holoAng(MainExpansionLink_L, Base:toWorld(ang(-LiftingOffset/8,0,0)))
                holoAng(MainExpansionLink_R, Base:toWorld(ang(-LiftingOffset/8,0,0)))
                holoPos(MainExpansionLink_R, Base:toWorld(vec(120+-Reverser*4,-70,38)))
                local EccentricRod_Ang = (holoEntity(EccentricRod_L):pos() - holoEntity(ExpansionRodBottom_L):pos()):toAngle()
                holoAng(EccentricRod_L, EccentricRod_Ang)
                local EccentricRod_Ang_2 = (holoEntity(EccentricRod_R):pos() - holoEntity(ExpansionRodBottom_R):pos()):toAngle()
                holoAng(EccentricRod_R, EccentricRod_Ang_2)                                
            }
        if(Reverser>0.1){Noot=2} if(Reverser<-0.1){Noot=-2}
            #left
            local ValveStemAmount = sin(WheelRotation+(90*Reverser)) * (Noot*abs(Reverser))
            holoPos(ValveStem_L, Base:toWorld(vec(135,70,38)-vec(ValveStemAmount - ((0.5) * -Reverser),0,0)))
            local EccentricRod_Ang = (holoEntity(EccentricRod_L):pos() - holoEntity(ExpansionRodBottom_L):pos()):toAngle()
            holoAng(EccentricRod_L, EccentricRod_Ang)           
            
            holoPos(MainExpansionLink_L, Base:toWorld(vec(120+-Reverser*4,70,38+cos(WheelRotation+1)-ReverserA*4)))
            holoPos(MainExpansionLink_R, Base:toWorld(vec(120+-Reverser*4,-70,38+cos(WheelRotation+1)-ReverserA*4)))
            holoAng(Combination_L, Base:toWorld(ang((sin(WheelRotation-(8*Reverser))*20)+(-Reverser-4),0,0)))
            local UnionLink_Ang = (holoEntity(UnionLink_L):pos() - holoEntity(CombinationEnd_L):pos()):toAngle()
            holoAng(UnionLink_L, UnionLink_Ang)
            local LiftingLink_Ang = (holoEntity(LiftingLink_L):pos() - holoEntity(LiftingLinkEnd_L):pos()):toAngle()
            holoAng(LiftingLink_L, LiftingLink_Ang)
            #right
            ExpansionLink_Ang = (holoEntity(ExpansionLink_R):pos() - holoEntity(Combination_R):pos()):toAngle()
            holoAng(ExpansionLink_R, ExpansionLink_Ang)
            ValveStemAmount = sin(WheelRotation+(90*Reverser)-90) * (Noot*abs(Reverser))
            holoPos(ValveStem_R, Base:toWorld(vec(135-40,-70,38)-vec(ValveStemAmount - ((0.5) * Reverser),0,0)))
            holoAng(Combination_R, Base:toWorld(ang((sin(WheelRotation+280+(6*Reverser))*25)+(-Reverser-1),0,0)))
            GearRod_Ang = (holoEntity(Gearlifting_L):pos() - holoEntity(ExpansionPlate_L):pos()):toAngle()
            holoAng(Gearlifting_L, GearRod_Ang)
            GearRod_Ang_2 = (holoEntity(Gearlifting_R):pos() - holoEntity(ExpansionPlate_R):pos()):toAngle()
            holoAng(Gearlifting_R, GearRod_Ang_2)
            UnionLink_Ang = (holoEntity(UnionLink_R):pos() - holoEntity(CombinationEnd_R):pos()):toAngle()
            holoAng(UnionLink_R, UnionLink_Ang)
            LiftingLink_Ang = (holoEntity(LiftingLink_R):pos() - holoEntity(LiftingLinkEnd_R):pos()):toAngle()
            holoAng(LiftingLink_R, LiftingLink_Ang)
            
            

        }
    }
    updateRods(1)
}

interval(50)
if(clk()) {
    Speed = 1  #round(Base:velL():x() / 10)
    updateRods(Speed)
}
