@name EMD Control Stand GP-SD7
@inputs [Seat Locomotive]:entity [CONTROLS_INPUT SWITCHES_INPUT CONTROL_STAND_INPUT CONTROL_STAND_INPUT2 LOCOMOTIVE_DATA]:array 
@inputs Battery_Knife_Switch Isolation Ground_Reset Start_Engine Stop_Engine
@inputs Layshaft_Crank Battery_Switch
@outputs [BOGIE_PLUG2 CONTROL_STAND_OUTPUT4 LIGHT_SYSTEM_OUTPUT]:array 
@persist A R R_EQ Buzz Psi Psi_Pipe TNotch DNotch BNotch Selector SelectA ASelection Isolate Reset Stop Start_Eng TMC Start_Eng2 Brake_C Sander_C 
@persist SelectSound HornA BellA Amp_Warn Dyna_Warn Slip_Warn BellToggle Reverser ReverserA Road_Lights_C Select SelectB Circuit_Time Bell_C 
@persist A_Horn H_Dim Speedo Battery_Amps B_Amps Fuel_P Fuel_ Water_Temp Lube_P NotchIndicator TransitionIndicator Circuit_Timer Reverser_C Horn_C 
@persist Control Fuel_Pump Generator_Field Engine_Run Gauge_Lighting HDLT GYRA Number Battery_Knife_Switch_C Ditch_Toggle Signal_Light_Dimmer 
@persist HDLT_Dimmer Lube_Pressure HDLT_Dimmer_C Signal_Light_Dimmer_C Reservoir Reservoir_EQ BC BEQ2 ResetChip0 ResetChip
@persist Speed0 Speed1 Speed2 Acceleration Acceleration_B Acceleration_C Start_Switch Timer_Startup0 Timer_Startup1 SetStart
@model models/jazzie/trains/locomotives/emd/cab/control_stand_gp7.mdl
@trigger none 

Notch = CONTROLS_INPUT[1,number] 
Brake = CONTROLS_INPUT[2,number] 
Reverser = CONTROLS_INPUT[3,number] 
Transition = CONTROLS_INPUT[4,number]
Horn = CONTROLS_INPUT[5,number] 
Bell = CONTROLS_INPUT[6,number] 
Sander = CONTROLS_INPUT[7,number] 
Cab_Light = CONTROLS_INPUT[8,number] 

Control = SWITCHES_INPUT[1,number] 
Fuel_Pump = SWITCHES_INPUT[2,number] 
Generator_Field = SWITCHES_INPUT[3,number] 
Engine_Run = SWITCHES_INPUT[4,number]
HDLT = SWITCHES_INPUT[5,number]
GYRA = SWITCHES_INPUT[6,number]
Number = SWITCHES_INPUT[7,number]
HDLT_Dimmer = SWITCHES_INPUT[8,number]
Signal_Light_Dimmer = SWITCHES_INPUT[9,number]


Battery_Charge = CONTROL_STAND_INPUT[1,number]  
Fuel_Pressure = CONTROL_STAND_INPUT[2,number]  
Lube_Pressure = CONTROL_STAND_INPUT[3,number]  
Lube = CONTROL_STAND_INPUT[4,number]   
Water_Temperature = CONTROL_STAND_INPUT[5,number] 
Fuel = CONTROL_STAND_INPUT[6,number] 
BC_Pressure = CONTROL_STAND_INPUT[7,number] 
BEQ_Pressure = CONTROL_STAND_INPUT[8,number] 
Main_reservoir = CONTROL_STAND_INPUT[9,number] 
Main_EQ_reservoir = CONTROL_STAND_INPUT[10,number] 

Traction_Motor_Current = CONTROL_STAND_INPUT2[1,number]  
GND_Reset = CONTROL_STAND_INPUT2[2,number]  

Locomotive_Model = LOCOMOTIVE_DATA[3,number] 
Dynamics_True = LOCOMOTIVE_DATA[6,number] 
     
if(Main_reservoir > 60)
{      
    BOGIE_PLUG2 = array(
    Ground_Reset, 
    Sander
    ) 
}

CONTROL_STAND_OUTPUT4 = array(
Start_Engine, 
Stop_Engine, 
Fuel_Pump,         
Control,
Generator_Field,  
Battery_Switch, 
Engine_Run, 
Isolation, 
Layshaft_Crank 
)

LIGHT_SYSTEM_OUTPUT = array(
GYRA, 
Ditch_Toggle, 
HDLT ,         
Signal_Light_Dimmer,
HDLT_Dimmer 
)
    
entity():setAlpha(0)

if(first() | dupefinished())
{
    timer("spawn",10000)
}

if(clk("spawn"))
{     
    A = 0
    holoCreate(A)
    holoParent(A,entity())
    holoColor(A,vec(50))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab_seat01.mdl")
    holoPos(A,entity():toWorld(vec(-2,-25,-21)))
    holoAng(A,entity():toWorld(ang(0,-30,0)))
    holoBodygroup(A,4,1)
        
    A = 1
    holoCreate(A)
    holoParent(A,entity())
    holoColor(A,vec(50))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/control_stand_gp7.mdl")
    holoPos(A,entity():toWorld(vec(0,0,0)))
    holoAng(A,entity():toWorld(ang(0,0,0)))
    
    A = 2
    holoCreate(A)
    holoParent(A,entity())
    holoColor(A,vec(50))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/barrel_control_stand.mdl")
    holoPos(A,entity():toWorld(vec(19,-8,-13.75)))
    holoAng(A,entity():toWorld(ang(0,50,0)))

    A = 3
    holoCreate(A)
    holoParent(A,entity())
    holoColor(A,vec(50))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/6-bl_brakestand.mdl")
    holoPos(A,entity():toWorld(vec(-20,-2,-43.5)))
    holoAng(A,entity():toWorld(ang(0,30,0)))    
        
    A = 4
    holoCreate(A)
    holoParent(A,entity())
    holoColor(A,vec(122,91,90))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/horn_pipe_base.mdl")
    holoPos(A,entity():toWorld(vec(32,4,0)))
    holoAng(A,entity():toWorld(ang(0,-60,0)))     

    A = 5
    holoCreate(A)
    holoParent(A,entity())
    holoColor(A,vec(50))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/speedometer_75mph.mdl")
    holoBodygroup(A,1,1)
    holoPos(A,entity():toWorld(vec(27,0,0)))
    holoAng(A,entity():toWorld(ang(0,-50,90)))     
        
    A = 6
    holoCreate(A)
    holoParent(A,entity())
    holoColor(A,vec(10))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/speedometer_pointer.mdl")
    holoPos(A,entity():toWorld(vec(27,0,0)))
    holoAng(A,entity():toWorld(ang(115,-50,90)))    

    A = 7
    holoCreate(A)
    holoParent(A,entity())
    holoScale(A,vec(1.3))
    holoColor(A,vec(255,0,0))
    holoMaterial(A,"sprops/textures/sprops_metal5")
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/horn_handle.mdl")
    holoPos(A,entity():toWorld(vec(17,-4.5,12)))
    holoAng(A,entity():toWorld(ang(0,0,0)))     
        
    A = 8
    holoCreate(A)
    holoParent(A,entity())
    holoScale(A,vec(0.015,0.015,2.5))
    holoColor(A,vec(50))
    holoModel(A, "cylinder")
    holoPos(A,entity():toWorld(vec(17,-4.5,28.5))) 
    
    A = 9
    holoCreate(A)
    holoParent(A,entity())
    holoScale(A,vec(0.015,0.015,1.7))
    holoColor(A,vec(50))
    holoModel(A, "cylinder")
    holoPos(A,entity():toWorld(vec(17,-4.5,0)))
    holoAng(A,entity():toWorld(ang(0,0,0)))    
    
    A = 10
    holoCreate(A)
    holoParent(A,entity())
    holoScale(A,vec(0.015,0.015,1.4))
    holoColor(A,vec(50))
    holoModel(A, "cylinder")
    holoPos(A,entity():toWorld(vec(24,-0.5,40)))
    holoAng(A,entity():toWorld(ang(0,-60,58))) 

    A = 11
    holoCreate(A)
    holoParent(A,entity())
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/horn_pipe_valve.mdl")
    holoPos(A,entity():toWorld(vec(30,2.85,32)))
    holoAng(A,entity():toWorld(ang(0,-60,0))) 
 
    A = 12
    holoCreate(A)
    holoParent(A,entity())
    holoColor(A,vec(255))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/ammeter_needle.mdl")
    holoPos(A,entity():toWorld(vec(0,2.1,6.1)))
    holoAng(A,entity():toWorld(ang(-66,0,0))) 

    A = 13
    holoCreate(A)
    holoParent(A,entity())
    holoColor(A,vec(255))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/control_stand_gp7_light_dim_lever.mdl")
    holoPos(A,entity():toWorld(vec(12.8,1,0)))
    holoAng(A,entity():toWorld(ang(0,0,0))) 

    A = 14
    holoCreate(A)
    holoParent(A,entity())
    holoColor(A,vec4(255))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/barrel_control_stand_reverser.mdl")
    holoPos(A,entity():toWorld(vec(19,-8,-19.85)))
    holoAng(A,entity():toWorld(ang(0,50,0))) 
    
    A = 15
    holoCreate(A)
    holoParent(A,entity())
    holoColor(A,vec4(255))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/barrel_control_stand_throttle.mdl")
    holoPos(A,entity():toWorld(vec(19.25,-9.75,-13.75)))
    holoAng(A,entity():toWorld(ang(0,40,0))) 

    A = 16
    holoCreate(A)
    holoParent(A,entity())
    holoColor(A,vec4(255))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/barrel_control_stand_transition.mdl")
    holoPos(A,entity():toWorld(vec(17,-8,-13.75)))
    holoAng(A,entity():toWorld(ang(0,260,0))) 

    A = 17
    holoCreate(A)
    holoParent(A,entity())
    holoColor(A,vec(130))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/brake_valve_stand_auto.mdl")
    holoPos(A,entity():toWorld(vec(-17.7,-5.9,-5)))
    holoAng(A,entity():toWorld(ang(0,0,0))) 
                         
    A = 18
    holoCreate(A)
    holoParent(A,entity())
    holoColor(A,vec(130))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/6-bl_independent_valve.mdl")
    holoPos(A,entity():toWorld(vec(-14.9,-10.35,-9.9)))
    holoAng(A,entity():toWorld(ang(0,0,0))) 
                                                 
    A = 19
    holoCreate(A)
    holoParent(A,entity())
    holoColor(A,vec(255,0,0))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/speedometer_pointer.mdl")
    holoPos(A,entity():toWorld(vec(7.25,-0.15,0)))
    holoAng(A,entity():toWorld(ang(-210,0,90)))    
    
    A = 20
    holoCreate(A)
    holoParent(A,entity())
    holoColor(A,vec(255))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/speedometer_pointer.mdl")
    holoPos(A,entity():toWorld(vec(7.25,-0.2,0)))
    holoAng(A,entity():toWorld(ang(-210,0,90)))  
    
    A = 21
    holoCreate(A)
    holoParent(A,entity())
    holoColor(A,vec(255,0,0))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/speedometer_pointer.mdl")
    holoPos(A,entity():toWorld(vec(-7.25,-0.15,0)))
    holoAng(A,entity():toWorld(ang(-210,0,90)))    
    
    A = 22
    holoCreate(A)
    holoParent(A,entity())
    holoColor(A,vec(255))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/speedometer_pointer.mdl")
    holoPos(A,entity():toWorld(vec(-7.25,-0.2,0)))
    holoAng(A,entity():toWorld(ang(-210,0,90)))      
    
    A = 23
    holoCreate(A)
    holoParent(A,entity())
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/control_stand_gp7_tc_indicator_off.mdl")
    holoMaterial(A,"wtp/paint_1")
    holoColor(A,vec(255,0,0) * 0.3)
    holoPos(A,entity():toWorld(vec(0,0,0)))
    holoAng(A,entity():toWorld(ang(0,0,0)))      
    
    A = 24
    holoCreate(A)
    holoParent(A,entity())
    holoDisableShading(A,1)
    holoColor(A,vec(255,0,0) * 0.3)
    holoMaterial(A,"wtp/paint_1")
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/control_stand_gp7_dc_indicator_off.mdl")
    holoPos(A,entity():toWorld(vec(0,0,0)))
    holoAng(A,entity():toWorld(ang(0,0,0)))    
    
    A = 25
    holoCreate(A)
    holoParent(A,entity())
    holoDisableShading(A,1)
    holoMaterial(A,"wtp/paint_1")
    holoColor(A,vec(255,200,0) * 0.3)
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/control_stand_gp7_ws_indicator_off.mdl")
    holoPos(A,entity():toWorld(vec(0,0,0)))
    holoAng(A,entity():toWorld(ang(0,0,0)))   

    A = 26
    holoCreate(A)
    holoParent(A,entity())
    holoColor(A,vec(255,255,0))
    holoScale(A,vec(0.94))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/speedometer_pointer.mdl")
    holoPos(A,entity():toWorld(vec(27.2,0.2,10.3)))
    holoAng(A,entity():toWorld(ang(-90,-55,90)))    
                
                
    A = 27
    holoCreate(A)
    holoParent(A,Locomotive)
    holoColor(A,vec(120))
    holoMaterial(A,"wtp/paint_1")
    holoScale(A,vec(1.6))
    holoModel(A, "models/jazzie/trains/cab/control_panel_button1.mdl")
    holoPos(A,Locomotive:toWorld(vec(3.75,129.35,68)))
    holoAng(A,Locomotive:toWorld(ang(0,0,-90)))   
       
    A = 28
    holoCreate(A)
    holoParent(A,Locomotive)
    holoColor(A,vec(255,0,0))
    holoMaterial(A,"wtp/paint_1")
    holoScale(A,vec(1.6))
    holoModel(A, "models/jazzie/trains/cab/control_panel_button1.mdl")
    holoPos(A,Locomotive:toWorld(vec(10,129.35,68)))
    holoAng(A,Locomotive:toWorld(ang(0,0,-90)))   
    
    A = 29
    holoCreate(A)
    holoParent(A,Locomotive)
    holoDisableShading(A,1)
    holoColor(A,vec(255,150,0))
    holoMaterial(A,"wtp/paint_1")
    holoScale(A,vec(1.6))
    holoModel(A, "models/jazzie/trains/cab/control_panel_button1.mdl")
    holoPos(A,Locomotive:toWorld(vec(16.25,129,68)))
    holoAng(A,Locomotive:toWorld(ang(0,0,-90)))  
    
        
    A = 30
    holoCreate(A)
    holoParent(A,Locomotive)
    holoDisableShading(A,1)
    holoColor(A,vec(255,50,0))
    holoMaterial(A,"wtp/paint_1")
    holoScale(A,vec(1.6))
    holoModel(A, "models/jazzie/trains/cab/control_panel_button1.mdl")
    holoPos(A,Locomotive:toWorld(vec(21.25,129,68)))
    holoAng(A,Locomotive:toWorld(ang(0,0,-90)))         
    
    A = 31
    holoCreate(A)
    holoParent(A,Locomotive)
    holoDisableShading(A,1)
    holoColor(A,vec(0,150,250))
    holoMaterial(A,"wtp/paint_1")
    holoScale(A,vec(1.6))
    holoModel(A, "models/jazzie/trains/cab/control_panel_button1.mdl")
    holoPos(A,Locomotive:toWorld(vec(21.25,129,60.25)))
    holoAng(A,Locomotive:toWorld(ang(0,0,-90)))     
    
    A = 32
    holoCreate(A)
    holoParent(A,Locomotive)
    holoScale(A,vec(1.4))
    holoModel(A, "models/jazzie/trains/cab/control_panel_switch1.mdl")
    holoPos(A,Locomotive:toWorld(vec(-2.7,128.65,64.15)))
    holoAng(A,Locomotive:toWorld(ang(0,0,-90)))    
    
    A = 32
    holoCreate(A)
    holoParent(A,Locomotive)
    holoScale(A,vec(1.9))
    holoDisableShading(A,1)
    holoModel(A, "models/jazzie/trains/cab/control_panel_switch1.mdl")
    holoPos(A,Locomotive:toWorld(vec(19,-194.25,-1.1)))
    holoAng(A,Locomotive:toWorld(ang(180,90,90)))        

    A = 33
    holoCreate(A)
    holoParent(A,Locomotive)
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/gauge_set.mdl")
    holoPos(A,Locomotive:toWorld(vec(-6.5,129.25,64)))
    holoAng(A,Locomotive:toWorld(ang(180,-180,90)))    
    
    A = 34
    holoCreate(A)
    holoParent(A,Locomotive)
    holoScale(A,vec(0.75))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/ammeter_needle.mdl")
    holoPos(A,Locomotive:toWorld(vec(9.95,127.75,58.6)))
    holoAng(A,Locomotive:toWorld(ang(0,-180,0)))  

    #Fuel Pressure
    A = 35
    holoCreate(A)
    holoParent(A,Locomotive)
    holoScale(A,vec(0.95))
    holoColor(A,vec(255,200,0))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/speedometer_pointer.mdl")
    holoPos(A,Locomotive:toWorld(vec(-12,129.25,60.25)))
    holoAng(A,Locomotive:toWorld(ang(150,180,99)))  
    
    #Fuel       
    A = 36
    holoCreate(A)
    holoParent(A,Locomotive)
    holoScale(A,vec(0.95))
    holoColor(A,vec(255,200,0))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/speedometer_pointer.mdl")
    holoPos(A,Locomotive:toWorld(vec(-12,129.25,67.75)))
    holoAng(A,Locomotive:toWorld(ang(150,180,99)))     
    
    #Lube Pressure
    A = 37
    holoCreate(A)
    holoParent(A,Locomotive)
    holoScale(A,vec(0.95))
    holoColor(A,vec(255,200,0))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/speedometer_pointer.mdl")
    holoPos(A,Locomotive:toWorld(vec(-19.25,129.25,60.25)))
    holoAng(A,Locomotive:toWorld(ang(150,180,99)))  
    
    #Water Temp     
    A = 38
    holoCreate(A)
    holoParent(A,Locomotive)
    holoScale(A,vec(0.95))
    holoColor(A,vec(255,200,0))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/speedometer_pointer.mdl")
    holoPos(A,Locomotive:toWorld(vec(-19.25,129.25,67.75)))
    holoAng(A,Locomotive:toWorld(ang(150,180,99)))   
    
    A = 39
    holoCreate(A)
    holoParent(A,Locomotive)
    holoScale(A,vec(1.3))
    holoModel(A, "models/jazzie/trains/cab/control_panel_switch1.mdl")
    holoPos(A,Locomotive:toWorld(vec(-2.75,128.65,64.2)))
    holoAng(A,Locomotive:toWorld(ang(180,180,90)))

    A = 40
    holoCreate(A)
    holoParent(A,Locomotive)
    holoScale(A,vec(0.88))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/battery_panel.mdl")
    holoPos(A,Locomotive:toWorld(vec(-22,120,8.75)))
    holoAng(A,Locomotive:toWorld(ang(180,180,90)))    

    A = 41
    holoCreate(A)
    holoParent(A,entity())
    holoScale(A,vec(0.12,0.12,0.09))
    holoModel(A, "models/jazzie/trains/number_wheel_throttle.mdl")
    holoPos(A,entity():toWorld(vec(18,-10.45,-12)))
    holoAng(A,entity():toWorld(ang(180,42,180)))     
    
    A = 42
    holoCreate(A)
    holoParent(A,entity())
    holoScale(A,vec(0.12,0.12,0.09))
    holoModel(A, "models/jazzie/trains/number_wheel_selector.mdl")
    holoPos(A,entity():toWorld(vec(16.75,-9.5,-11.3)))
    holoAng(A,entity():toWorld(ang(180,31,180))) 

    A = 43
    holoCreate(A)
    holoParent(A,entity())
    holoColor(A,vec(220,0,0))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/6-bl_small_valve.mdl")
    holoPos(A,entity():toWorld(vec(-14.1,-6.9,-8.75)))
    holoAng(A,entity():toWorld(ang(0,30,0))) 
 
    A = 44
    holoCreate(A)
    holoParent(A,entity())
    holoColor(A,vec(220,170,0))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/6-bl_small_valve.mdl")
    holoPos(A,entity():toWorld(vec(-18.75,-9.5,-8.75)))
    holoAng(A,entity():toWorld(ang(0,30,0)))           
    
    A = 53
    holoCreate(A)
    holoParent(A,Locomotive)
    holoScale(A, vec(0))
    holoModel(A, "models/jazzie/trains/locomotives/emd/wheelset_40.mdl")
    holoPos(A,Locomotive:toWorld(vec(-27.93,121.1,17.1)))
    holoAng(A,Locomotive:toWorld(ang(0,0,180)))       

    A = 54
    holoCreate(A)
    holoParent(A,53)
    holoScale(A, vec(0.88))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/panel_breaker_battery.mdl")
    holoPos(A,Locomotive:toWorld(vec(-27.93,123.25,17.1)))
    holoAng(A,Locomotive:toWorld(ang(0,0,180)))    
    
    A = 55
    holoCreate(A)
    holoParent(A,Locomotive)
    holoScale(A, vec(0))
    holoModel(A, "models/jazzie/trains/locomotives/emd/wheelset_40.mdl")
    holoPos(A,Locomotive:toWorld(vec(-23.75,121.15,17.73)))
    holoAng(A,Locomotive:toWorld(ang(0,0,180)))       

    A = 56
    holoCreate(A)
    holoParent(A,55)
    holoScale(A, vec(0.88))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/panel_breaker_aux.mdl")
    holoPos(A,Locomotive:toWorld(vec(-23.75,121.1,17.75)))
    holoAng(A,Locomotive:toWorld(ang(0,0,180)))                                                        
}

if((clk("cooldown2") & changed(Isolation)) | (clk("cooldown") & changed(Isolation)) | changed(GND_Reset))
{                                 
    Locomotive:soundPlay("relay",0,select(randint(1,2),
        "_jazzlok/switches/relay_01.wav",
        "_jazzlok/switches/relay_02.wav"
        ) 
    )   
      
    soundPitch("relayz1", select(randint(1,5),90,105,110,95,100))
    soundStop("relayz1",0.4)

} 

Start_Eng = Start_Eng + (Start_Switch  - Start_Eng) /  max( 1.5, 0 )

holoAng(32,Locomotive:toWorld(ang(180 - (Start_Eng * 60),90,90)))  
    
if(Timer_Startup0 <= 30 & Start_Engine)
{
    Start_Switch = 1
    Timer_Startup0 += 0.2
}
else
{
    Start_Switch = 0
    Timer_Startup0 = 0
}

if(Timer_Startup0 >= 30)
{
    SetStart = 1
}
     
if(SetStart & Timer_Startup1 <= 30)
{
    Timer_Startup1 += 0.2
    Start_Switch = -1                                
}

if(Timer_Startup1 >= 25)
{
    Start_Switch = 0
}

if(Stop_Engine | (!Start_Engine & !SetStart))
{
    Start_Switch = 0
    Timer_Startup1 = 0
    Timer_Startup0 = 0
    SetStart = 0
}
    
if(Cab_Light & Battery_Knife_Switch)
{  
    lightCreate(1,Locomotive:toWorld(vec(35,160,55))+vec(),vec(250,190,100),300,1.5)
    lightParent(1,Locomotive)
    
    lightCreate(2,Locomotive:toWorld(vec(-35,160,55))+vec(),vec(250,190,100),300,1.5)
    lightParent(2,Locomotive)
    
    holoColor(49,vec4(255,240,200,130))
    holoColor(50,vec4(255,240,200,130))
}
else
{
    lightRemoveAll()
    holoColor(49,vec4(255,240,200,0))
    holoColor(50,vec4(255,240,200,0))
}

if(Control)
{
    holoBodygroup(1,1,1)
}
elseif(!Control)
{
    holoBodygroup(1,1,0)
}

if(Fuel_Pump)
{
    holoBodygroup(1,2,1)
}
elseif(!Fuel_Pump)
{
    holoBodygroup(1,2,0)
}

if(Generator_Field)
{
    holoBodygroup(1,3,1)
}
elseif(!Generator_Field)
{
    holoBodygroup(1,3,0)
}

if(Engine_Run)
{
    holoBodygroup(1,4,1)
}
elseif(!Engine_Run)
{
    holoBodygroup(1,4,0)
}

if(Gauge_Lighting)
{
    holoBodygroup(1,5,1)
}
elseif(!Gauge_Lighting)
{
    holoBodygroup(1,5,0)
}

if(HDLT)
{
    holoBodygroup(1,6,1)
}
elseif(!HDLT)
{
    holoBodygroup(1,6,0)
}

if(GYRA)
{
    holoBodygroup(1,7,1)
}
elseif(!GYRA)
{
    holoBodygroup(1,7,0)
}

if(Number)
{
    holoBodygroup(1,8,1)
}
elseif(!Number)
{
    holoBodygroup(1,8,0)
}

Speed = Locomotive:vel():length() / 23.5 
Speedo = Speedo + ( Speed  - Speedo ) /  max( 10, 0 ) 
holoAng(6,entity():toWorld(ang(115+(Speedo*4),-50,90)))

if(Seat:driver() == owner())
{
    holoColor(14,vec4(255))
    Res = 1
    
}
else
{
    Res = 0
    holoColor(14,vec4(0))
}


if(Horn)    
{
    holoPos(7,entity():toWorld(vec(16,-7.5,10)))
    holoAng(7,entity():toWorld(ang(0,0,10))) 
       
    holoAng(8,entity():toWorld(ang(8,65,0)))   
    holoPos(8,entity():toWorld(vec(16.75,-6.25,27)))  
    
    holoPos(9,entity():toWorld(vec(16,-5.5,-2.5)))
    holoAng(9,entity():toWorld(ang(-9,85,0)))

    holoPos(10,entity():toWorld(vec(24,-0.6,38.5)))
    holoAng(10,entity():toWorld(ang(0,-60,49)))     
    holoScale(10,vec(0.015,0.015,1.3))
    holoAng(11,entity():toWorld(ang(0,-60,40)))           
}
elseif(!Horn)
{
    holoPos(7,entity():toWorld(vec(17,-4.5,12)))
    holoAng(7,entity():toWorld(ang(0,0,0))) 
       
    holoAng(8,entity():toWorld(ang(0,0,0)))  
    holoPos(8,entity():toWorld(vec(17,-4.5,28.5)))
    
    holoPos(9,entity():toWorld(vec(17,-4.5,0)))
    holoAng(9,entity():toWorld(ang(0,0,0)))  
    
    holoPos(10,entity():toWorld(vec(24,-0.5,40)))
    holoAng(10,entity():toWorld(ang(0,-60,58))) 
    holoScale(10,vec(0.015,0.015,1.4))
    holoAng(11,entity():toWorld(ang(0,-60,0)))         
}

if(changed(Res))
{
    soundPlay("res2",0,"buttons/latchunlocked1.wav")
    soundPitch("res2", 50)
    soundPlay("res",0,"_jazzlok/switches/barrel_notch.wav")
    soundPitch("res", 80)
    soundStop("res",0.5)
    soundStop("res2",1)    
    
} 

if(changed(GND_Reset) & !GND_Reset | (!GND_Reset & (changed(Isolation) & Isolation)))
{
    Locomotive:soundPlay("gnd",0,"_jazzlok/switches/bell_04.wav")
    soundStop("gnd",2) 
     
    Locomotive:soundPlay("gnd2",0,"_jazzlok/switches/bell_loop.wav")
    soundPitch("gnd2",125)
    soundStop("gnd2",2)      
                
} 


if(changed(Control) | 
changed(Fuel_Pump) | 
changed(Generator_Field) | 
changed(Engine_Run) | 
changed(Gauge_Lighting) | 
changed(HDLT) |
changed(GYRA) | 
changed(Number))
{
    soundPlay("switch",0,                       
        select(    
            randint(1,2),
            "_jazzlok/switches/switch_heavy_02.wav",
            "_jazzlok/switches/switch_heavy_03.wav"
            ) 
        )
        
    soundPitch("switch", select(randint(1,5),140,135,140,155,150))
    soundVolume("switch",1)
    soundStop("switch",0.35) 
} 


if(changed(SelectSound) | changed(HDLT_Dimmer))
{
    soundPlay("notch",0,                       
        select(    
            randint(1,2),
            "_jazzlok/switches/switch_heavy_02.wav",
            "_jazzlok/switches/switch_heavy_03.wav"
            ) 
        )
        
    soundPitch("notch", select(randint(1,5),90,105,110,95,100))
    soundVolume("notch",1)
    soundStop("notch",0.5) 
} 

if(changed(Notch))
{
    soundPlay("notch",0,                       
        select(    
            randint(1,4),
            "_jazzlok/switches/throttle_lever01.wav",
            "_jazzlok/switches/throttle_lever02.wav",
            "_jazzlok/switches/throttle_lever03.wav",
            "_jazzlok/switches/throttle_lever04.wav"            
            ) 
        )
    soundStop("notch",0.5) 
} 

if(changed(Transition) & Transition >= 0)
{
    Locomotive:soundPlay("notch4",0,"_jazzlok/switches/buzzer_01.wav") 
    soundPitch("notch4",120)
    soundVolume("notch4",0.2)
    soundStop("notch4",0.5)
    Circuit_Time = 1
} 

if(Circuit_Time)
{
    Circuit_Timer++
}

if(Circuit_Timer > 3)
{
    Locomotive:soundPlay("notch1",0,"_jazzlok/switches/relay_02.wav") 
    soundPitch("notch1",70)
    Circuit_Timer = 0
    Circuit_Time = 0
}


if(changed(Transition) & Transition >= 1)
{
    soundPlay("notch2",0,"_jazzlok/switches/selector_action.wav") 
} 

if(changed(Transition) & Transition <= -1)
{
    soundPlay("notch2",0,"_jazzlok/switches/switch_med_02.wav") 
} 

if(changed(Transition) & Transition == 0)
{
    soundPlay("notch2",0,"_jazzlok/switches/barrel_notch.wav") 
} 

if(changed(Isolation))
{
    Locomotive:soundPlay("rot_switch",0,"_jazzlok/switches/rotary_switch.wav")
    soundStop("rot_switch",0.3) 
} 

if(changed(Reverser))
{
    soundPlay("reverser",0,"_jazzlok/switches/switch_heavy_01.wav")
    soundStop("reverser",0.5) 
} 

if(changed(Ground_Reset) | changed(Stop_Engine))
{
    Locomotive:soundPlay("rot_switch",0,"_jazzlok/switches/switch_med_03.wav")
    soundStop("rot_switch",0.3) 
    soundPitch("rot_switch",150)
} 

if(changed(Brake) | changed(Horn) | changed(Bell))
{
    soundPlay("brake",0,                       
        select(    
            randint(1,2),
            "_jazzlok/switches/valve_01.wav",
            "_jazzlok/switches/valve_02.wav"
            ) 
        )
        
    soundPitch("brake", select(randint(1,5),90,105,110,95,100))
    soundVolume("brake",1)
    soundStop("brake",0.25) 
}
    
if(changed(round(BNotch,0.1)))
{
    soundPlay("hiss23",0,"_jazzlok/brakes/air_brake_hiss_2.wav")
    soundStop("hiss23",2) 
}

soundPitch("hiss23",80)
soundVolume("hiss23",0.35)


if(!GND_Reset & Isolation)
{
    holoColor(31,vec(0,150,255))   
}
else
{
    timer("cooldown2",1000)
    
    if(clk("cooldown2"))
    {     
        holoColor(31,vec(0,150,255) * 0.25)   
    }
}
if(Lube < 30)
{
    holoColor(29,vec(255,150,0))   
}
else
{
    timer("cooldown3",30000)
    
    if(clk("cooldown3"))
    {        
        holoColor(29,vec(255,150,0) * 0.25)   
    }
}

if(Water_Temperature > 188)
{
    holoColor(30,vec(255,50,0))   
}
else
{
    timer("cooldown",30000)
    
    if(clk("cooldown"))
    {        
        holoColor(30,vec(255,50,0) * 0.25)   
    }
}

if(Slip_Warn)
{
    holoColor(25,vec(255,250,0))   
}
else
{
    holoColor(25,vec(255,250,0) * 0.25)   
}
    
Select = Select + ( Transition - Select ) /  max( 3, 0 )   

if(Transition < 0)
{
    holoAng(16,entity():toWorld(ang(0,60-(Select*20),0)))  
}
else
{
    holoAng(16,entity():toWorld(ang(0,60-(Select*8),0)))  
}

if(Traction_Motor_Current > 750 & Transition >= 1) 
{ 
    holoColor(23,vec(255,0,0))
} 
else 
{ 
    holoColor(23,vec(255,0,0) * 0.25) 
}

if(Traction_Motor_Current > 600 & Transition < 0)
{
    holoColor(24,vec(255,0,0))  
}
else
{
    holoColor(24,vec(255,0,0) * 0.25)  
}


NotchIndicator = NotchIndicator + ( Notch - NotchIndicator ) /  max( 2, 0 )     
holoAng(41,entity():toWorld(ang(180,32-(NotchIndicator*36),180)))    

TransitionIndicator = TransitionIndicator + ( Transition - TransitionIndicator ) /  max( 2, 0 )  

if(Transition > -1)
{   
    holoAng(42,entity():toWorld(ang(180,31-(TransitionIndicator*36),180)))
}
else
{
    holoAng(42,entity():toWorld(ang(180,68,180)))   
}   

A = A + ( Traction_Motor_Current - A ) /  max( 8, 0 )     
holoAng(12,entity():toWorld(ang(-66+TMC/11.1,0,0)))

if(A > 1500)
{
    TMC = 1500
}
else
{
    TMC = A
}

#===========================================================================

if(Speed0 == 0)
{
    Speed1 = round(toUnit("m/s",Locomotive:vel():length()),1)
    timer("second",1000)
    Speed0 = 1
    }

if(clk("second"))
{
    Speed2 = round(toUnit("m/s",Locomotive:vel():length()),1)
    Acceleration = (Speed2 - Speed1) * 3.280
    Speed0 = 0
    }   
    
Acceleration_C = Acceleration_C + ( Acceleration_B - Acceleration_C ) /  max( 5, 0 ) 

if(Acceleration >= 4)
{
    Acceleration_B = 4
}
elseif(Acceleration <= -4)
{
    Acceleration_B = -4
}
else
{
    Acceleration_B = Acceleration 
}

holoAng(26,entity():toWorld(ang(-90+(Acceleration_C * 30),-50,90)))        


Battery_Knife_Switch_C = Battery_Knife_Switch_C + ( Battery_Knife_Switch - Battery_Knife_Switch_C ) /  max( 2, 0 ) 
holoAng(53,Locomotive:toWorld(ang(0,0,90+(Battery_Knife_Switch_C * 180) ))) 
holoAng(55,Locomotive:toWorld(ang(0,0,90+(Battery_Knife_Switch_C * 180) ))) 

if(Main_reservoir > 0)
{
    Reservoir = Main_reservoir
}
else
{
    Reservoir = 0    
}

if(Main_EQ_reservoir > 0)
{
    Reservoir_EQ = Main_EQ_reservoir
}
else
{
    Reservoir_EQ = 0    
}

if(BC_Pressure > 0)
{
    BC = BC_Pressure
}
else
{
    BC = 0    
}

if(BEQ_Pressure > 0)
{
    BEQ2 = BEQ_Pressure
}
else
{
    BEQ2 = 0    
}        
#===========================================================================

H_Dim = H_Dim + ( HDLT_Dimmer - H_Dim ) /  max( 3, 0 )     
holoAng(13,entity():toWorld(ang(0,0,-33*H_Dim))) 

TNotch = TNotch + ( Notch - TNotch ) /  max( 2, 0 )   
holoAng(15,entity():toWorld(ang(0,45-(TNotch * 8),0)))    

Battery_Amps = Battery_Amps + ( B_Amps - Battery_Amps ) /  max( 3, 0 )   

B_Amps = Battery_Charge / 20.5

holoAng(34,Locomotive:toWorld(ang(0+Battery_Amps,-180,0)))


interval(120)
Fuel_P =  Fuel_P + ( Fuel_Pressure - Fuel_P ) /  max( 5, 0 )   
holoAng(35,Locomotive:toWorld(ang(150+Fuel_P * 2.7,180,99)))  

Fuel_ =  Fuel_ + ( Fuel - Fuel_ ) /  max( 5, 0 )   
holoAng(36,Locomotive:toWorld(ang(150+Fuel_ /8.32,180,99)))  

Lube_P =  Lube_P + ( Lube_Pressure - Lube_P ) /  max( 5, 0 )   
holoAng(37,Locomotive:toWorld(ang(150+Lube_P * 2.7,180,99)))  

Water_Temp =  Water_Temp + ( Water_Temperature - Water_Temp ) /  max( 5, 0 )   
holoAng(38,Locomotive:toWorld(ang(150+Water_Temp,180,99)))  


#===========================================================================
R = R + ( Reservoir - R ) /  max( 5, 0 )   
holoAng(19,entity():toWorld(ang(-210+(R * 1.5),0,90)))    

R_EQ = R_EQ + ( Reservoir_EQ - R_EQ ) /  max( 5, 0 )   
holoAng(20,entity():toWorld(ang(-210+(R_EQ * 1.5),0,90)))  

Psi = Psi + ( BC - Psi ) /  max( 10, 0 )   
holoAng(21,entity():toWorld(ang(-210+(Psi * 1.5),0,90)))    

Psi_Pipe = Psi_Pipe + ( BEQ2 - Psi_Pipe ) /  max( 10, 0 )   
holoAng(22,entity():toWorld(ang(-210+(Psi_Pipe * 1.5),0,90)))  


#===========================================================================
Isolate = Isolate + ( Isolation - Isolate ) /  max( 1.5, 0 )   
holoAng(39,Locomotive:toWorld(ang(180*Isolate,180,90)))  

Reset = Reset + ( Ground_Reset - Reset ) /  max( 1.2, 0 )   
holoPos(27,Locomotive:toWorld(vec(3.75,129.35-(Reset/1.5),68))) 
 
Stop = Stop + ( Stop_Engine - Stop ) /  max( 1.2, 0 )   
holoPos(28,Locomotive:toWorld(vec(10,129.35-(Stop/1.5),68)))  

Brake_C = Brake_C + ( Brake - Brake_C ) /  max( 3, 0 )   
holoAng(17,entity():toWorld(ang(0,-15+Brake_C*20,0))) 

Bell_C = Bell_C + ( Bell - Bell_C ) /  max( 2.5, 0 )   
holoAng(43,entity():toWorld(ang(0,30+Bell_C*60,0))) 

Sander_C = Sander_C + ( Sander - Sander_C ) /  max( 2.5, 0 )   
holoAng(44,entity():toWorld(ang(0,30-Sander_C*60,0))) 

Reverser_C = Reverser_C + ( Reverser - Reverser_C ) /  max( 2, 0 )   
holoAng(14,entity():toWorld(ang(0,50+Reverser_C*16,0))) 

if(ResetChip)
{
    ResetChip0++
    
    if(ResetChip0 > 120)
    {
        reset()
    }
}

RadioCmd = owner():lastSaid():explode(" ")

runOnChat(1)
if(chatClk(owner()))
{
    if(RadioCmd[1,string]=="/fixit")
    {
        hideChat(1)
        RC = 1    
        print("JAZZLOK: Control Stand Reset") 
        reset()
    }
}

