@name Jazzlok EMD GP7-9-18-20 Main Functions v2
@inputs [Locomotive]:entity [CONTROLS_INPUT CONTROL_STAND_INPUT4 LOCOMOTIVE_DATA]:array 
@outputs [BOGIE_OUTPUT CONTROL_STAND_OUTPUT EXHAUST_OUTPUT LOCOMOTIVE_OUTPUT]:array BEQ_Set TotalMass Mass BC0 BC_Pressure BEQ_Pressure Brake Phys
@persist Timer_Startup Notch Brake Reverser Transition Power SND Start_Eng Sound_Power B_Load Overheat Lube Sound_Off4 Sound_Off4_Set B_Charge QuickLoad Refuel 
@persist BC_Pressure BEQ_Pressure Main_reservoir Main_EQ_reservoir TotalMass Compressor Speed Water_Temperature Fuel Timer_Startup0 Power_Out Exhaust Lube_Pressure Fuel_Pressure
@persist BEQ_Pressure_Changed Sound_Accelerate Sound_Accelerate_Set Sound_Off_Set Sound_Off Sound_Off2 Sound_Off2_Set Sound_Off3 Sound_Off3_Set Prime Start Notch_Change SC BEQ_Set
@persist SetRelease0 SetRelease SetService0 SetService SetHolding0 SetHolding MassCount0 MassCount BC0 Mass RPM PumpShutdown Brake_Remote
@trigger none

#===================================================================================================
Fuel_System = 0
#===================================================================================================
interval(100)

Locomotive:setMass(30000)
Mass = 1
Locomotive_Type = LOCOMOTIVE_DATA[3,number] 

if(!Fuel_System)
{
    Fuel_Max = 1200
    Lubrication_Oil_Max = 200
}
elseif(Fuel_System == 1)
{
    Fuel_Max = LOCOMOTIVE_DATA[4,number] 
    Lubrication_Oil_Max = LOCOMOTIVE_DATA[5,number] 

    findInSphere(Locomotive:pos(),512)
    findIncludeModel("models/props_junk/gascan001a.mdl") 

    if(findResult(1))
    {
        Refuel = 1
        holoColor(1,vec4(0,255,0,160))
    }
    else
    {
        Refuel = 0
        holoColor(1,vec4(0))
    }
}

if((Locomotive_Type >= 1 & Locomotive_Type <= 3) | Locomotive_Type == 5)
{
    DEPS = 100
    DEPS2 = 60
    DEPST = 30

    DEPM_ADD = 50
    StartupDelay = 30

    # Engine
    EngineLayer1 = "_jazzlok/diesel_engines/emd_engines/emd567_startup_idle.wav"
    EngineLayer2 = "_jazzlok/diesel_engines/emd_engines/emd567_notch8.wav"
    EngineLayer3 = "_jazzlok/diesel_engines/emd_engines/emd567_notch4-5.wav"
    EngineLayer4 = "_jazzlok/diesel_engines/emd_engines/emd567_rumble03.wav" 
    EngineLayer5 = "_jazzlok/diesel_engines/emd_engines/emd567_rootsblower01.wav"           
    EngineLayer6 = "_jazzlok/diesel_engines/emd_engines/emd567_rootsblower02.wav"     
    EngineLayer7 = "_jazzlok/diesel_engines/emd_engines/emd567_rumble06.wav" 
        
    soundVolume("Engine_Layer1",1)  
    soundVolume("Engine_Layer2",0)   
    soundVolume("Engine_Layer3",0)   
    soundVolume("Engine_Layer4",0)          
    soundVolume("Engine_Layer5",0)    
    soundVolume("Engine_Layer6",0)  
    soundVolume("Engine_Layer7",0)  
                   
    if(Timer_Startup >= 100)
    {
        soundPitch("Engine_Layer1",DEPS + Power * 1.5)
        soundPitch("Engine_Layer2",DEPS2 + (Power * 1.5))
        soundPitch("Engine_Layer3",DEPS2 + (Power * 1.5))                
        soundPitch("Engine_Layer4",20 * (Sound_Accelerate * 2) + (Power / 3.25))             
        soundPitch("Engine_Layer5",(80 + (Power * (1.8 + (Sound_Off2 / 2)))) * ((Sound_Off / 3) + 0.75))  
        soundPitch("Engine_Layer6",(50 + (Power * (1.8 + (Sound_Off2 / 2)))) * ((Sound_Off / 3) + 0.75))  
        soundPitch("Engine_Layer7",20 * (Sound_Accelerate * 2) + (Power / 3.25))                                                           
    }

    if(Power > 40)   
    {            
        soundVolume("Engine_Layer4",1 - (Power / 120))                 
        soundVolume("Engine_Layer3",1 - (Power / 40))  
    }
    
    if(Power > 0)  
    {  
        Sound_Applyed_Power = Sound_Power + (Power - Sound_Power) /  max( 5, 0 ) 
    }
    else
    {
        Sound_Applyed_Power == 0
    }

    Sound_Accelerate = Sound_Accelerate + ( (1 + Sound_Accelerate_Set) -  Sound_Accelerate ) /  max( 20, 0 )    
    Sound_Off = Sound_Off + ( Sound_Off_Set -  Sound_Off ) /  max( 20, 0 )    
    Sound_Off2 = Sound_Off2 + ( Sound_Off2_Set -  Sound_Off2 ) /  max( 10, 0 )      
    Sound_Off3 = Sound_Off3 + ( Sound_Off3_Set -  Sound_Off3 ) /  max( 10, 0 )  
    Sound_Off4 = Sound_Off4 + ( Sound_Off4_Set -  Sound_Off4 ) /  max( 10 , 0 )                  

        if(changed(Sound_Applyed_Power) & (Sound_Applyed_Power < (Notch * (8 * 0.775))) & Transition != -1)   
        {
            Sound_Off4_Set = 1
            Sound_Off3_Set = 0
            Sound_Off2_Set = 1
            Sound_Off_Set = 1
            Sound_Accelerate_Set = 1.5
            Eng_Throttle_Smoke = 1
            Exhaust = 1
            
            if(Start)
            {
                Fuel_Pressure = 12 + (random(Power,Power*0.98) / 1.5)
            }             
            
            soundVolume("Engine_Layer1",1 - (Power / 50))    
            soundVolume("Engine_Layer2",0 + (Power / 120)) 
            soundVolume("Engine_Layer3",0 + (Power / 10) * Sound_Off_Set)      
            soundVolume("Engine_Layer4",(1 + (Power / 180)) * Sound_Off4)
            soundVolume("Engine_Layer5",0 + (Power / 30 )) 
            soundVolume("Engine_Layer6",0 + (Power / 130 )) 
            soundVolume("Engine_Layer7",0.3 + ((Power / 180)) * Sound_Off4)
        }
        else
        {
            Sound_Off4_Set = 0
            Sound_Off3_Set = 1
            Sound_Off2_Set = 0
            Sound_Off_Set = 1
            Sound_Accelerate_Set = 1
            
            if(Start)
            {
                Fuel_Pressure = 12 + (random(Power,Power*0.98) / 3.2)
            } 
            
            Eng_Throttle_Smoke = 0
            Exhaust = 0     
            
            if(Transition != -1)
            {
                soundVolume("Engine_Layer4",(Sound_Off2 / 7) + (Power / 90))
                soundVolume("Engine_Layer7",(Sound_Off2 / 8) + (Power / 160)) 
                
                soundVolume("Engine_Layer3",0 + (Power / 30) * Sound_Off_Set)     
                                   
                if(Power > 45) 
                {  
                    soundVolume("Engine_Layer2",0 + (Power / 70))
                }
                elseif(Power > 38) 
                {
                    soundVolume("Engine_Layer2",0 + (Power / 90))
                }
                elseif(Power < 38) 
                {
                    soundVolume("Engine_Layer2",0 + (Power / 110))
                }
            }
            else
            {
                soundVolume("Engine_Layer2",0)
                soundVolume("Engine_Layer3",0)
                soundVolume("Engine_Layer4",0)
                soundVolume("Engine_Layer7",0)
                
            }
            
            soundVolume("Engine_Layer1",Sound_Off_Set - (Power / 80))
            soundVolume("Engine_Layer5",0 + (Power / 70 ))    
            soundVolume("Engine_Layer6",0 + (Power / 150))    
        }
        
        if((Notch * 6.5) < Power)   
        {
            Sound_Off4_Set = 0
            Sound_Off3_Set = 0
            Sound_Off_Set = 0
            Sound_Accelerate_Set = 1
            
            if(Start)
            {
                Fuel_Pressure = 12 + (random(Power,Power*0.98) / 20)
            }
            
            Exhaust = 0
            soundVolume("Engine_Layer7",Sound_Off / 3)
            soundVolume("Engine_Layer6",(Power / 120)) 
            soundVolume("Engine_Layer5",(Power / 40)) 
            soundVolume("Engine_Layer4",Sound_Off / 3)
            soundVolume("Engine_Layer2",Sound_Off / 3)
            soundVolume("Engine_Layer3",Sound_Off / 2)
            soundVolume("Engine_Layer1",(1 - (Power / (120 - Sound_Power))))
        }
}   

if(Locomotive_Type == 4)    
{
    DEPS = 100
    DEPS2 = 60
    DEPST = 30

    DEPM_ADD = 50
    StartupDelay = 30

    # Engine
    EngineLayer1 = "_jazzlok/diesel_engines/emd_engines/emd567d2_startup.wav"
    EngineLayer2 = "_jazzlok/diesel_engines/emd_engines/emd645_n7-8.wav"
    EngineLayer3 = "_jazzlok/diesel_engines/emd_engines/emd645_n3-4.wav"

    EngineLayer5 = "_jazzlok/diesel_engines/emd_engines/emd710_full.wav"           
    EngineLayer6 = "_jazzlok/diesel_engines/emd_engines/emd567d2_whine.wav"     
    EngineLayer7 = "_jazzlok/diesel_engines/emd_engines/emd645_n5-6.wav" 
    EngineLayer8 = "_jazzlok/diesel_engines/emd_engines/emd567_turbo_n8.wav"
           
    soundVolume("Engine_Layer1",1)  
    soundVolume("Engine_Layer2",0)   
    soundVolume("Engine_Layer3",0)   
    soundVolume("Engine_Layer4",0)          
    soundVolume("Engine_Layer5",0)    
    soundVolume("Engine_Layer6",0)  
    soundVolume("Engine_Layer7",0)  
    soundVolume("Engine_Layer8",0)           
              
    if(Timer_Startup >= 100)
    {
        soundPitch("Engine_Layer1",DEPS + Power * 2.9)
        soundPitch("Engine_Layer2",35 + (Power * 1.32))
        soundPitch("Engine_Layer3",50 + (Power * 2.6))                           
        soundPitch("Engine_Layer5",(0 + (Power * (2 + (Sound_Off2 / 2)))) * ((Sound_Off / 3) + 0.75))  
        soundPitch("Engine_Layer6",(50 + (Power * (1.8 + (Sound_Off2 / 4)))) * ((Sound_Off / 4) + 0.75))  
        soundPitch("Engine_Layer7",50 + (Power * 1.62))         
        soundPitch("Engine_Layer8",35 + (Power * 1.32))                                                  
    }

    if(Power > 40)   
    {            
        soundVolume("Engine_Layer4",1 - (Power / 120))                 
        soundVolume("Engine_Layer3",1 - (Power / 40))  
    }
    
    if(Power > 0)  
    {  
        Sound_Applyed_Power = Sound_Power + (Power - Sound_Power) /  max( 5, 0 ) 
    }
    else
    {
        Sound_Applyed_Power == 0
    }

    Sound_Accelerate = Sound_Accelerate + ( (1 + Sound_Accelerate_Set) -  Sound_Accelerate ) /  max( 20, 0 )    
    Sound_Off = Sound_Off + ( Sound_Off_Set -  Sound_Off ) /  max( 20, 0 )    
    Sound_Off2 = Sound_Off2 + ( Sound_Off2_Set -  Sound_Off2 ) /  max( 10, 0 )      
    Sound_Off3 = Sound_Off3 + ( Sound_Off3_Set -  Sound_Off3 ) /  max( 10, 0 )  
    Sound_Off4 = Sound_Off4 + ( Sound_Off4_Set -  Sound_Off4 ) /  max( 10 , 0 )                  
    
        if(changed(Sound_Applyed_Power) & (Sound_Applyed_Power < (Notch * (8 * 0.775))) & Transition != -1)   
        {
            Sound_Off4_Set = 1
            Sound_Off3_Set = 0
            Sound_Off2_Set = 1
            Sound_Off_Set = 1
            Sound_Accelerate_Set = 1.5
            Eng_Throttle_Smoke = 1
            Exhaust = 1
            
            if(Start)
            {
                Fuel_Pressure = 12 + (random(Power,Power*0.98) / 1.5)
            }  
                   
            soundVolume("Engine_Layer1",1 - (Power / 50))    
            soundVolume("Engine_Layer2",0 + (Power / 120)) 
            soundVolume("Engine_Layer3",0 + (Power / 30))   
            soundVolume("Engine_Layer5",0 + (Power / 30 )) 
            soundVolume("Engine_Layer6",0 + (Power / 120 )) 
            soundVolume("Engine_Layer7",1 - ((Power / 80)) * Sound_Off4)
            soundVolume("Engine_Layer8",0 + (Power / 100)) 
        }
        else
        {
            Sound_Off4_Set = 0
            Sound_Off3_Set = 1
            Sound_Off2_Set = 0
            Sound_Off_Set = 1
            Sound_Accelerate_Set = 1
            
            if(Start)
            {
                Fuel_Pressure = 12 + (random(Power,Power*0.98) / 3.2)
            } 
            
            Eng_Throttle_Smoke = 0
            Exhaust = 0   
            soundVolume("Engine_Layer1",Sound_Off_Set - (Power / 80))  
            soundVolume("Engine_Layer5",0 + (Power / 70 ))    
            soundVolume("Engine_Layer6",0 + (Power / 150))    
            soundVolume("Engine_Layer3",0 + (Power / 15) * (Sound_Off / 1.1)) 
            soundVolume("Engine_Layer7",0.1 + (Sound_Off2 / 2) + (Power / 160))    
                                   
            if(Power > 38) 
            {
                soundVolume("Engine_Layer2",0 + (Power / 70))
                soundVolume("Engine_Layer8",0 + (Power / 70))
            }
            elseif(Power < 38) 
            {
                soundVolume("Engine_Layer2",0 + (Power / 110))
                soundVolume("Engine_Layer8",0 + (Power / 110))
            }
        }
        
        if((Notch * 6.5) < Power)   
        {
            Sound_Off4_Set = 0
            Sound_Off3_Set = 0
            Sound_Off_Set = 0
            Sound_Accelerate_Set = 1
        
            if(Start)
            {
                Fuel_Pressure = 12 + (random(Power,Power*0.98) / 20)
            }
            
            Exhaust = 0
            soundVolume("Engine_Layer8",(0.25 + (Sound_Off / 1.3)) *  (Power / 80))
            soundVolume("Engine_Layer7",Sound_Off / 3)
            soundVolume("Engine_Layer6",Power / 60) 
            soundVolume("Engine_Layer5",(Power / 30)) 
            soundVolume("Engine_Layer2",(0.25 + (Sound_Off / 1.3)) * (Power / 80))
            soundVolume("Engine_Layer3",(0.25 + (Sound_Off / 1.3)) *  (Power / 80))
            soundVolume("Engine_Layer1",(1 - (Power / (60 - Sound_Power))))
        }    
}    

function number soundRelay() 
{
    if(changed(clk()) & clk())
    {                 
        Locomotive:soundPlay("relay",0,select(randint(1,2),
            "_jazzlok/switches/relay_01.wav",
            "_jazzlok/switches/relay_02.wav"
            ) 
        )   
        
        soundPitch("relay", select(randint(1,5),90,105,110,95,100))
        soundStop("relay",0.4)
    }
} 

if(changed(Refuel) & Refuel)
{                                 
    Locomotive:soundPlay("lube",0,"ambient/water/leak_1.wav")  
    soundVolume("lube",0.6)       
}
elseif(changed(Refuel) & !Refuel)
{
    soundStop("lube",0.25)
}

if(changed(Refuel) & Refuel)
{                                 
    Locomotive:soundPlay("refuel",0,"ambient/water/water_in_boat1.wav")  
    soundVolume("refuel",0.8) 
     
    Locomotive:soundPlay("refuel2",0,"ambient/gas/steam_loop1.wav")    
    soundPitch("refuel2",200)  
    soundVolume("refuel2",0.4)      
         
}
elseif(changed(Refuel) & !Refuel)
{
    soundStop("refuel",0.25)
    soundStop("refuel2",0.25)
}

if(Fuel >= Fuel_Max)
{
    soundStop("refuel",0.25)
    soundStop("refuel2",0.25)
}

if(Lube >= Lubrication_Oil_Max )
{
    soundStop("lube",0.25)
}

if(changed(Prime) & Prime)
{                                 
    Locomotive:soundPlay("prime",0,"_jazzlok/diesel_engines/emd_engines/emd567_prestart2.wav")  
    soundVolume("prime",0.4)       
}

if(changed(Compressor) & Compressor)
{                                 
    Locomotive:soundPlay("compressor",0,"_jazzlok/brakes/compressor_start_loop.wav")  
    soundVolume("compressor",0.65)       
}
 
if(changed(Compressor) & !Compressor)
{                                 
    Locomotive:soundPlay("compressor",0,"_jazzlok/brakes/compressor_stop.wav")  
    soundVolume("compressor",0.65)         
}

if(changed(Start_Eng) & Start_Eng)
{    
    Locomotive:soundPlay("Engine_Layer1",0,EngineLayer1)                                
    Locomotive:soundPlay("Engine_Layer2",0,EngineLayer2)  
    Locomotive:soundPlay("Engine_Layer3",0,EngineLayer3)  
    Locomotive:soundPlay("Engine_Layer4",0,EngineLayer4)  
    Locomotive:soundPlay("Engine_Layer5",0,EngineLayer5)   
    Locomotive:soundPlay("Engine_Layer6",0,EngineLayer6)    
    Locomotive:soundPlay("Engine_Layer7",0,EngineLayer7)   
    Locomotive:soundPlay("Engine_Layer8",0,EngineLayer8)         
}

if(changed(Start_Eng) & !Start_Eng)
{                                 
    soundStop("Engine_Layer1")        
    soundStop("Engine_Layer2") 
    soundStop("Engine_Layer3") 
    soundStop("Engine_Layer4") 
    soundStop("Engine_Layer5")   
    soundStop("Engine_Layer6")     
    soundStop("Engine_Layer7") 
    soundStop("Engine_Layer8")
} 

function number systemStartup() 
{
    if(Timer_Startup < 99)
    {
        soundVolume("Engine_Layer2",0)   
        soundVolume("Engine_Layer3",0)   
        soundVolume("Engine_Layer4",0)          
        soundVolume("Engine_Layer5",0) 
        soundVolume("Engine_Layer6",0) 
        soundVolume("Engine_Layer7",0) 
        soundVolume("Engine_Layer8",0.05)
        soundPitch("Engine_Layer7",200)        
    }  
        
    Lube_Pressure = 10 + random(Power,Power*0.98) 
    Fuel_Pressure = 10 + random(Power,Power*0.98)
        
    RPM = random(Timer_Startup * 3, Timer_Startup * 3)
    Prime = 1
    
    if(Timer_Startup0 <= 30)
    {
        Timer_Startup0 += 0.25
    }
    
    if(Timer_Startup <= 100 & Timer_Startup0 >= 30)
    {
        B_Load = -1000
        Start_Eng = 1
        Prime = 0
        Timer_Startup += 0.5                                  
    }
    
    if(Timer_Startup > 40)
    {
        B_Load = -1000 + (Timer_Startup * 4) 
    }
    
    if(Timer_Startup > 75)
    {
        B_Load = 0
    }     
} 

function number systemShutdown() 
{
    RPM = random(Timer_Startup * 5,Timer_Startup * 5)

    Timer_Startup0 = 0
    Prime = 0
    B_Load = 0
    Compressor = 0
    SetStart = 0
    Power_Out = 0
    Fan_Control = 0
    soundStop("prime") 
     
    Lube_Pressure = 0    
    Fuel_Pressure = 0
            
    if(Timer_Startup > 0)
    {         
        Timer_Startup-= 1     
        Start_Eng = 1
        interval(100)
        soundVolume("Engine_Layer1",(Timer_Startup / 100))  
        soundVolume("Engine_Layer2",0)   
        soundVolume("Engine_Layer3",0)   
        soundVolume("Engine_Layer4",0)          
        soundVolume("Engine_Layer5",(Timer_Startup / 150))    
        soundVolume("Engine_Layer6",0)   
        soundVolume("Engine_Layer7",0)   
        soundVolume("Engine_Layer8",0)  
                                
        soundPitch("Engine_Layer1",Timer_Startup)          
        soundPitch("Engine_Layer5",Timer_Startup) 
                          
    }
    else
    {
        RPM = 0
        Start_Eng = 0
        soundStop("Engine_Layer1")        
        soundStop("Engine_Layer2") 
        soundStop("Engine_Layer3") 
        soundStop("Engine_Layer4") 
        soundStop("Engine_Layer5")   
        soundStop("Engine_Layer6")     
        soundStop("Engine_Layer7")
        soundStop("Engine_Layer8")
        soundStop("compressor") 
        soundStop("prime")         
    }
} 

EXHAUST_OUTPUT = array(
Notch,
Exhaust,
Timer_Startup,
RPM,
Start,
Notch_Change,
Transition
) 
    
#=========================================================================================================================
#Temps
#=========================================================================================================================
if(first() | dupefinished())
{
    Water_Temperature = 160
    BC_Pressure = 65
}

if(Water_Temperature < 160 + (Power / 1.5))
{
    Water_Temperature  += 0.026
}   
 
if(Water_Temperature > 170)
{
    Fan_Control = 1
}

if(Water_Temperature > 180)
{
    Fan_Control = 2
}

if(Water_Temperature > 190)
{
    Overheat = 1
}

if(Water_Temperature < 162)
{ 
    Fan_Control = 0  
}   

if(Water_Temperature < 165)
{
    Overheat = 0
}
    
if(Water_Temperature > 160)
{  
    if(Fan_Control == 0)
    {
        Water_Temperature -= 0.01
    }
    
    if(Fan_Control == 1)
    {
        Water_Temperature -= 0.02
    }
    
    if(Fan_Control == 2)
    {
        Water_Temperature -= 0.025
    }    
}


if(Fuel_System == 1)
{
    if(Fuel < Fuel_Max)
    {
        Fuel += Refuel     
    }    

    if(Lube < Lubrication_Oil_Max)
    {
        Lube += Refuel
    }   

    if(Fuel > 0 & Lube > 0 & Start)
    {
        Fuel -= 0.027
        Lube -= 0.01
    }
}
else
{
    Fuel = Fuel_Max
    Lube = Lubrication_Oil_Max
}

#===================================================================================================
Start_Engine = CONTROL_STAND_INPUT4[1,number] 
Stop_Engine = CONTROL_STAND_INPUT4[2,number] 
Fuel_Pump = CONTROL_STAND_INPUT4[3,number]          
Control = CONTROL_STAND_INPUT4[4,number]  
Gen_Field = CONTROL_STAND_INPUT4[5,number]  
Battery_Switch = CONTROL_STAND_INPUT4[6,number]
Eng_Run = CONTROL_STAND_INPUT4[7,number]
Isolation = CONTROL_STAND_INPUT4[8,number]
Layshaft_Crank = CONTROL_STAND_INPUT4[9,number]

CONTROL_STAND_OUTPUT = array(
B_Charge,
Fuel_Pressure,
Lube_Pressure,    
Lube,       
Water_Temperature,
Fuel,
BC0, 
BEQ_Pressure, 
Main_reservoir,
Main_EQ_reservoir          
) 

LOCOMOTIVE_OUTPUT = array(
Fan_Control,
RPM,
Transition
)         
    
if(Start_Engine & !Isolation)
{
    Start = 1
}
elseif(!Start_Engine & Timer_Startup0 < 30)
{
    Start = 0
    Lube_Pressure = 0    
    Fuel_Pressure = 0  
}
elseif(Timer_Startup0 >= 30)
{
    Start = 1
    SetStart = 1
}

if(Timer_Startup > 30)
{
    SetStart = 2
}

if(Stop_Engine)
{
    Start = 0
    SetStart = 0
    Fan_Control = 0
    Lube_Pressure = 0    
    Fuel_Pressure = 0  
}

if(!Fuel_Pump & Timer_Startup >= 100)
{    
    if(PumpShutdown <= 150)
    {
        PumpShutdown++
    }
    
    if(PumpShutdown > 149)
    {
        systemShutdown()
    }
}
else
{
    PumpShutdown = 0
}

B_Charge = B_Charge + ( B_Load - B_Charge ) /  max( 5, 0 ) 

if(Start & Fuel_Pump & Control & Gen_Field & Eng_Run & Battery_Switch & Fuel > 1 & Lube > 1)
{
    systemStartup()
}
elseif(!Start | ((!Fuel_Pump | !Control | !Gen_Field) & Timer_Startup < 100) | !Eng_Run | (!Battery_Switch & Timer_Startup < 100) | Fuel < 1 | Lube < 1)
{
    systemShutdown()  
}
    
if(Timer_Startup >= 100) 
{
    Mass = TotalMass - 300000
    BC_Pressure = 65
    BC = 65
    Prime = 0
    soundStop("prime")      
 
    if(Isolation)
    {   
        Notch = CONTROLS_INPUT[1,number]  
    }
    
    Brake  = CONTROLS_INPUT[2,number]  
    Reverser = CONTROLS_INPUT[3,number]          
    Transition = CONTROLS_INPUT[4,number]  
                               
    A_UNIT_OUTPUT = array(
    Notch,
    Brake,
    Reverser,
    Transition
    ) 
    
    BOGIE_OUTPUT = array(
    Notch,
    Brake,
    Reverser,
    Transition,
    Locomotive_Type,
    Power_Out,
    BC0,
    Main_reservoir,
    TotalMass      
    ) 
                               
    RPM = random(300,295) + (Power * 12)     
       
    if(Notch > 1)
    {
        Notch2 = Notch 
    }
    else
    {
        Notch2 = 0 
    }     
 
    if(changed(Power))
    {
        if((changed(Notch) & clk()) & Notch_Change < 0.5)
        {
            Notch_Change += 0.1
        }
    }
    else
    {
        Notch_Change = 0
    }
                      
    if(Layshaft_Crank & !Isolation)
    {
        Notch = 8
        Notch_Change = 3  
        if(Locomotive_Type == 4)
        {
            Notch_Change = 2.5
        }
        else
        {
            Notch_Change = 3   
        }         
    }
        
    if(!Layshaft_Crank & !Isolation)
    {
        Notch = 0
        Notch_Change = 1
    }
                   
    if(((Isolation | Layshaft_Crank) & !Overheat) & Transition != -1 & Control)
    {                        
        if((Power < (50* ((Notch2 - 1) / 7))))
        {
            Power += 0.2 + Notch_Change 
        }
    }
        
    if(Notch == 1 & (Isolation & Gen_Field) & !Overheat & (Reverser == 1 | Reverser == -1))
    {
        Power_Out = 7
    }    
    elseif(Notch >= 2 & (Isolation & Gen_Field) & !Overheat & (Reverser == 1 | Reverser == -1))
    {
        Power_Out = round(Power + 7)
    }
    elseif(Notch == 0 | Overheat)
    {
        Power_Out = 0
    }
                   
    if((Power > (50 * (Notch2) / 8)) | (Overheat & Power > 0))
    {
        Power -= 0.1 + (Notch_Change / 2) + Overheat
    }

    if(Power > 49 & Notch == 8 & !Overheat)
    {
        Power = 50
    }
    else
    {
        Power = Power
    }

    if(Power > 0 & Transition == -1)
    {
        Power -= 0.5
    }

    if(Transition == -1)
    {
        Exhaust = 0
    }
                    
        if(Brake == 0)
        {
            BC_Pressure = 0 
        }                                
        elseif(Brake == 1)
        {
            BC_Pressure = 7 
        }
        elseif(Brake == 2)
        {
            BC_Pressure = 16
        }
        elseif(Brake == 3)
        {
            BC_Pressure = 30  
        }
        elseif(Brake == 4)
        {
            BC_Pressure = 40 
        }
        elseif(Brake == 5)
        {
            BC_Pressure = 72
        }                              
                                       
        if(changed(round(BEQ_Pressure)))
        {         
            Main_reservoir -= 0.2
        }
        else
        {
            BEQ_Pressure_Changed = 0
        }
        
        if((Main_reservoir <= 80) & Brake != 5)
        {
            Compressor = 1
        }
           
        if(BEQ_Set < 70 & Brake != 5)
        {
            BEQ_Set += 2
        }
            
        if(Brake == 5 & BEQ_Set >= 0)
        {
            BEQ_Set -= 3
        }   

        if(Main_reservoir < 70)  
        {
            BEQ_Set = Main_reservoir
        }  
                    
        if(Compressor)
        {
            Main_reservoir += 0.2 + QuickLoad   
              
            if(Main_reservoir >= 110)
            {
                Main_reservoir = 110
                Compressor = 0
                QuickLoad = 0 
            }
        }       

    
    Speed = Locomotive:vel():length() 
            
    BEQ_Pressure = BEQ_Pressure + ((BEQ_Set - (BC_Pressure / 1.8)) - BEQ_Pressure) / max( 1 + (TotalMass / 20000), 0 )
     
    Main_EQ_reservoir = Main_EQ_reservoir + ((BEQ_Set - (BC_Pressure / 1.8)) - Main_EQ_reservoir) / max( 1 + (TotalMass / 20000), 0 )

    BC0 = BC0 + (BC_Pressure - BC0) / max( 1 + (TotalMass / 30000), 0 )   
    
    if(Brake <= 1)
    {
        if(MassCount0 <= 10)
        {
            MassCount0++
            MassCount = 1
        }
        
        if(MassCount0 >= 10)
        {
            MassCount = 0
        }
        
        if(MassCount)
        {              
            TotalMass = Locomotive:mass()
            foreach (K, V:entity = Locomotive:getConstraints()) 
            {
                TotalMass += Locomotive:mass()
            }
        }
    }
    else
    {
        MassCount0 = 0
    } 
      
    if(!Brake & BEQ_Pressure >= 66 | Brake_Remote)
    {        
        if(SetRelease0 <= 10)
        {
            SetRelease0++
            SetRelease = 1
        }
        
        if(SetRelease0 >= 10)
        {
            SetRelease = 0
        }
        
        if(SetRelease)
        {
            local Con = Locomotive:getConstraints()
            Locomotive:propPhysicalMaterial("gmod_ice")      
            for(N=1,Con:count())
            {
                Con[N,entity]:propPhysicalMaterial("gmod_ice")
            }
            Phys = 1
        }                            
    }
    else
    {
        SetRelease0 = 0 
    } 
                         
    if((Speed < 200 & BEQ_Pressure < 65) & Brake_Remote ) 
    {
        if(SetService0 <= 10)
        {
            SetService0++
            SetService = 1
        }
        
        if(SetService0 >= 10)
        {
            SetService = 0
        }
                     
        if(SetService)
        {
            local Con = Locomotive:getConstraints()
            Locomotive:propPhysicalMaterial("ice")
            
            for(N=1,Con:count())
            {
                Con[N,entity]:propPhysicalMaterial("ice")
            }
                Phys = 2
            }
        }
    }
    else
    {
        SetService0 = 0 
    } 
                                                                    
    if((Speed < 20 & BEQ_Pressure < 60) | Brake_Remote == 5) 
    {
        BrakeForce = 0
        
        if(SetHolding0 <= 10)
        {
            SetHolding0++
            SetHolding = 1
        }
        
        if(SetHolding0 >= 10)
        {
            SetHolding = 0
        }
                     
        if(SetHolding)
        {
            local Con = Locomotive:getConstraints()
            Locomotive:propPhysicalMaterial("metal")
            for(N=1,Con:count())
            {
                Con[N,entity]:propPhysicalMaterial("metal")
            }
            Phys = 3
        }                
    }
    else
    {
        SetHolding0 = 0 
    }                
                   
runOnChat(1)
    
RadioCmd = owner():lastSaid():explode(" ")
            
if(chatClk(owner()))
{
    if(RadioCmd[1,string]=="/start")
    {
        hideChat(1)
        Timer_Startup0 = 30
        QuickLoad = 4
        Start = 1
        systemStartup()  
    } 
    
    if(RadioCmd[1,string]=="/b" & RadioCmd[2,string]:toNumber())
    {
        hideChat(1)
        Brake_Remote = RadioCmd[2,string]:toNumber()
    }
 
    if(RadioCmd[1,string]=="/b" & RadioCmd[2,string]=="0")
    {
        hideChat(1)
        Brake_Remote = 0 
    }                                                                   
}
    
if(Start_Engine & !Battery_Switch)
{
    G_BKS = "AND CLOSE The battery knife switch inside lower rear cabinet @ Cab"
}
    
if(Fuel_Pump & Control & Gen_Field & Eng_Run & !Battery_Switch)
{
    G_BKS = "CLOSE The battery knife switch inside lower rear cabinet @ Cab"
}

if(Start_Engine & !Control)
{
    G_C = " 'CONTROL' "
}

if(Start_Engine & !Fuel_Pump)
{
    G_FP = " 'FUEL PUMP' "
}
  

if(Start_Engine & !Gen_Field)
{
    G_GF = " 'GENERATOR FIELD' "
}


if(Start_Engine & !Eng_Run)
{
    G_ER = " 'ENGINE RUN' "
} 

if((changed(Start_Engine) & Start_Engine) & !Battery_Switch & (!Fuel_Pump | !Control | !Gen_Field  | !Eng_Run))
{            
    print("JAZZLOK: Please turn ON the switches labeled: " + G_C + G_FP + G_GF + G_ER + " @ Control Stand " + G_BKS)    
} 
elseif((changed(Start_Engine) & Start_Engine) & Battery_Switch & (!Fuel_Pump | !Control | !Gen_Field  | !Eng_Run))
{            
    print("JAZZLOK: Please turn ON the switches labeled: " + G_C + G_FP + G_GF + G_ER + " @ Control Stand " + G_BKS)    
}             
elseif((changed(Start_Engine) & Start_Engine) &  Fuel_Pump & Control & Gen_Field & Eng_Run & !Battery_Switch)
{
    print(G_BKS)  
}    
elseif((changed(Start_Engine) & Start_Engine) &  Fuel_Pump & Control & Gen_Field & Eng_Run & Battery_Switch & !Isolation)
{
    print("HOLD down the button Untill the lever points at 'START ENGINE'")  
}  
  
if((changed(Start_Engine) & Start_Engine) & Isolation)
{
    print("Set Isolation Switch to 'START' from 'RUN' position")  
}         
      
if(dupefinished())
{
    reset()
}


