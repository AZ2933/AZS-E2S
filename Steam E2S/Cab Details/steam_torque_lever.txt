@name Steam Torque lever
@inputs L1 Direction #W S Dead_Man BrakeControl
@outputs #L1
@persist #L1A L1D
@trigger

L1A = L1 / 14


    E=entity()
    
    if(changed(Direction)) 
    {
    soundPlay(1,1,"buttons/lever6.wav")
    }
        else  
        {    
        soundStop(1,0.5)
    }
     
#[
    if(changed(L1)) 
    {
    soundPlay(2,0.25,"buttons/lever7.wav")
    }
        else  
        {    
        soundStop(2,0.1)
    }
]#


#[
    if( W == 1 & L1 < L1D & L1 < L1D )
    { 
         L1+=1
    }
    
    if( S == 1 & L1 > -2 & L1 <= 10 )
    {
         L1-=1
        } 
]#
    
# Torque Lever

    if( L1 >= 200 ) 
    {
        L1A = 200 / 14
        }
        else 
        {
            L1A = L1 
    }
#[    
    if( BrakeControl >= 1 ) 
    {
        L1D = 0
        }    
        else
        {
            L1D = 4
    }
]#
    
# Brake Lever



if(first()|dupefinished()){

# Torque Lever

    holoCreate(1,E:toWorld(+vec(3,0,-1)),vec(1),E:toWorld(+ang(0,0,0)))
    holoModel(1,"models/sprops/cuboids/height06/size_1/cube_6x6x6.mdl")
    holoScale(1, vec(2.25,1.25,0.5)) 
    holoColor(1,vec(80))
    holoMaterial(1,"WTP/metal_2")

    holoCreate(2,E:toWorld(+vec(0,0,0.5)),vec(1),E:toWorld(+ang(0,0,0)))
    holoModel(2,"hq_cylinder")
    holoScale(2, vec(0.25,0.25,0.25)) 
    holoColor(2,vec(80))    

    holoCreate(9,E:toWorld(+vec(0,0,2)),vec(1),E:toWorld(+ang(0,0,0)))
    holoModel(9,"hq_cylinder")
    holoScale(9, vec(0.35,0.35,0.05)) 
    holoColor(9,vec(80))        
        
    holoCreate(8,E:toWorld(+vec(0,-2,2)),vec(1),E:toWorld(+ang(0,0,0)))
    holoModel(8,"cube")
    holoScale(8, vec(0.35,0.3,0.05)) 
    holoColor(8,vec(80))  
    
    holoCreate(7,E:toWorld(+vec(-0,0,3)),vec(1),E:toWorld(+ang(0,0,0)))
    holoModel(7,"hq_cylinder")
    holoScale(7, vec(0.25,0.25,0.3)) 
    holoColor(7,vec(80))   
    
    holoCreate(3,E:toWorld(+vec(0,0,0)),vec(1),E:toWorld(+ang(0,0,0)))
    holoModel(3,"hq_cylinder")
   
    holoCreate(4,E:toWorld(+vec(-8,0,4)),vec(1),E:toWorld(+ang(0,180,0)))
    holoModel(4,"models/sprops/rectangles/size_1/rect_3x12x3.mdl")
    holoScale(4, vec(1.75,0.5,0.5))
    holoColor(4,vec(150,0,0))
    holoMaterial(4,"sprops/trans/lights/light_plastic")
    
    holoCreate(5,E:toWorld(+vec(-5,0,2.5)),vec(1),E:toWorld(+ang(0,180,180)))
    holoModel(5,"models/sprops/triangles/right/size_0/rtri_3x12.mdl")
    holoScale(5, vec(0.75,0.5,0.5))
    holoMaterial(5,"sprops/trans/lights/light_plastic")
    holoColor(5,vec(150,0,0))
    
    holoCreate(6,E:toWorld(+vec(-17.5,0,6.85)),vec(1),E:toWorld(+ang(180,0,0)))
    holoModel(6,"hq_cylinder")
    holoScale(6, vec(0.15,0.15,0.35)) 
    holoColor(6,vec(50))               
 
# Direction Lever

    holoCreate(16,E:toWorld(+vec(0,0,0)),vec(1),E:toWorld(+ang(0,0,0)))
    holoModel(16,"hq_cylinder")
    
    
    holoCreate(17,E:toWorld(+vec(0,-8.5,1.25)),vec(1),E:toWorld(+ang(90,90,0)))
    holoModel(17,"models/sprops/cylinders/size_2/cylinder_3x12.mdl")
    holoScale(17, vec(0.4,0.4,1.5)) 
    holoMaterial(17,"sprops/trans/lights/light_plastic")

    holoCreate(18,E:toWorld(+vec(0,-15.5,1.25)),vec(1),E:toWorld(+ang(90,90,0)))
    holoModel(18,"models/sprops/cylinders/size_2/cylinder_3x12.mdl")
    holoScale(18, vec(0.55,0.55,0.5)) 
    holoColor(18,vec(40))
    holoMaterial(18,"sprops/trans/lights/light_plastic")
}

for( A = 10,14 )
{
    holoParent(A,E)
    }
    
for( A = 1,3 )
{
    holoParent(A,E)
    }
    
for( A =8,9 )
{
    holoParent(A,E)
    }

          
    holoParent(4, 3)
    holoParent(5, 4)
    holoParent(6, 4)
    holoParent(7, 3)
    
    holoParent(14, 10)
    holoParent(15, 10)
    
    holoParent(16, E)
    holoParent(17, 16)
    holoParent(18, 17)

    
    holoAng(3,E:toWorld(+ang(0,270-L1A*15,0)))
    holoScale(3, vec(0.1))

    holoAng(16,E:toWorld(+ang(0,30-Direction*60,0)))
    holoScale(16, vec(0.1))

#[
interval(500)

    if(Dead_Man == 0) 
    {
        L1 = 0
        }
        else 
        { 
            L1 = L1
    }
]#
