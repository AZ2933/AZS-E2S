@name Jazzlok F-unit dashboard
@inputs Selector Slip_Warn Traction_Motor_Current Brake_Cylinder_Pressure Brake_EQ_Pressure Main_reservoir Main_EQ_reservoir
@outputs AS 
@persist Charge_B R Psi_Pipe Psi R_EQ Dyna_Warn
@model models/jazzie/trains/locomotives/emd/cab/f_unit_dashboard.mdl

entity():setAlpha(0)

if(first() | dupefinished())
{   
    A = 0
    holoCreate(A)
    holoParent(A,entity())
    holoColor(A,vec(50))
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/f_unit_dashboard.mdl")
    holoPos(A,entity():toWorld(vec(0,0,0)))
    holoAng(A,entity():toWorld(ang(0,0,0)))
     
    A = 1
    holoCreate(A)
    holoParent(A,entity())
    holoMaterial(A,"wtp/paint_1")
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/ammeter_needle.mdl")
    holoDisableShading(A,1)
    holoPos(A,entity():toWorld(vec(4.25,2.25,-1)))
    holoAng(A,entity():toWorld(ang(0,0,0)))
    
    holoClipEnabled(A,1,1)
    holoClip(A,1,vec(0,0,2.75),vec(0,0,1),0)

    A = 2
    holoCreate(A)
    holoColor(A,vec(255,0,0))
    holoParent(A,entity())
    holoModel(A, "models/jazzie/trains/gauges/pointer_01.mdl")
    holoDisableShading(A,1)
    holoScale(A,vec(1.2))
    holoPos(A,entity():toWorld(vec(-4.65,0.2,-3.7)))
    holoAng(A,entity():toWorld(ang(-118,180,-90)))
    
    A = 3
    holoCreate(A)
    holoColor(A,vec(255))
    holoParent(A,entity())
    holoModel(A, "models/jazzie/trains/gauges/pointer_01.mdl")
    holoDisableShading(A,1)
    holoScale(A,vec(1.2))
    holoPos(A,entity():toWorld(vec(-4.65,0.3,-3.7)))
    holoAng(A,entity():toWorld(ang(-118,180,-90)))
    
    A = 4
    holoCreate(A)
    holoColor(A,vec(255,0,0))
    holoParent(A,entity())
    holoModel(A, "models/jazzie/trains/gauges/pointer_01.mdl")
    holoDisableShading(A,1)
    holoScale(A,vec(1.2))
    holoPos(A,entity():toWorld(vec(-11.75,0.2,-3.7)))
    holoAng(A,entity():toWorld(ang(-118,180,-90)))
    
    A = 5
    holoCreate(A)
    holoColor(A,vec(255))
    holoParent(A,entity())
    holoModel(A, "models/jazzie/trains/gauges/pointer_01.mdl")
    holoDisableShading(A,1)
    holoScale(A,vec(1.2))
    holoPos(A,entity():toWorld(vec(-11.75,0.3,-3.7)))
    holoAng(A,entity():toWorld(ang(-118,180,-90)))

    A = 6
    holoCreate(A)
    holoColor(A,vec(255,200,0) * 0.25)
    holoParent(A,entity())
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/f_unit_dashboard_brake_light.mdl")
    holoDisableShading(A,1)
    holoScale(A,vec(1.2))
    holoPos(A,entity():toWorld(vec(-7,0,0)))
    holoAng(A,entity():toWorld(ang(0,0,0)))

    A = 7
    holoCreate(A)
    holoColor(A,vec(255,200,0) * 0.25)
    holoParent(A,entity())
    holoModel(A, "models/jazzie/trains/locomotives/emd/cab/f_unit_dashboard_slip_light.mdl")
    holoDisableShading(A,1)
    holoScale(A,vec(1.2))
    holoPos(A,entity():toWorld(vec(-9.5,0,0)))
    holoAng(A,entity():toWorld(ang(0,0,0)))    
}

interval(80)
Charge_B = Charge_B + ( Traction_Motor_Current*30 - Charge_B ) /  max( 10, 0 )
holoAng(1,entity():toWorld(ang(67-(Charge_B / 7.45),0,0)))

R = R + ( Main_reservoir - R ) /  max( 10, 0 )    
R_EQ = R_EQ + ( Main_EQ_reservoir - R_EQ ) /  max( 10, 0 ) 
Psi = Psi + ( Brake_Cylinder_Pressure - Psi ) /  max( 10, 0 ) 
Psi_Pipe = Psi_Pipe + ( Brake_EQ_Pressure - Psi_Pipe ) /  max( 10, 0 ) 

if(Dyna_Warn)
{
    holoColor(6,vec(255,200,0))   
}
else
{
    holoColor(6,vec(255,200,0) * 0.25)   
}

if(Slip_Warn)
{
    holoColor(7,vec(255,200,0))   
}
else
{
    holoColor(7,vec(255,200,0) * 0.25)   
}

if(Traction_Motor_Current > 700 & Selector == 2)
{
    Dyna_Warn = 1  
}
else
{
    Dyna_Warn = 0 
}

holoAng(2,entity():toWorld(ang(-118+(Psi * 1.5),180,-90)))
holoAng(3,entity():toWorld(ang(-118+(Psi_Pipe * 1.5),180,-90)))
holoAng(4,entity():toWorld(ang(-118+(R * 1.5),180,-90)))
holoAng(5,entity():toWorld(ang(-118+(R_EQ * 1.5),180,-90)))

if(dupefinished())
{
    reset()
}
