@name Southern PS-4 Animated Drivers
@inputs Reverser Base:entity Trailing:entity Pilot:entity
@persist Base:entity Holo HolosSpawned RodRadius Speed WheelRotation

@persist LiftingArm LiftingArm_B LiftingArm_C LiftingArm_D LiftingArm_D_2 MainExpansionLink_L MainExpansionLink_R Wheel_1 Wheel_2 Wheel_3 Wheel_4 Wheel_5 

@persist SideRod_L MainRod_L Crosshead_L EccentricCrank_L EccentricRod_L ExpansionPlate_L ExpansionRodBottom_L ExpansionRodTop_L EccentricRodEnd_L
@persist UnionLink_L Combination_L CombinationEnd_L ValveStem_L ValveRod_L ExpansionLink_L LiftingLink_L LiftingLinkEnd_L Gearlifting_L

@persist SideRod_R MainRod_R Crosshead_R EccentricCrank_R EccentricRod_R ExpansionPlate_R ExpansionRodBottom_R ExpansionRodTop_R 
@persist UnionLink_R Combination_R CombinationEnd_R ValveStem_R ValveRod_R ExpansionLink_R LiftingLink_R LiftingLinkEnd_R Gearlifting_R

@trigger ReverserChanged Reverser

if(dupefinished()){reset()}
if(first() | duped()) {
    
    RodMaterial = ""
    RodColor = vec(218)
    RodRadius = 17
    ParentScale = 0.5
    

      
    X=1
    holoCreate(X)   holoPos(X,Base:toWorld(vec(0,0,0)))
    holoParent(X,Base)   holoModel(X,"models/unionssteamkits/ps-4_main_driving_wheel.mdl")
    holoAng(X,Base:toWorld(ang(0,0,0)))    holoScale(X,vec(1))   holoColor(X,vec(255))     
    Wheel_1 = X
    X++
    holoCreate(X)   holoPos(X,Base:toWorld(vec(100,0,0)))
    holoParent(X,Base)   holoModel(X,"models/unionssteamkits/ps-4_driving_wheel.mdl")
    holoAng(X,Base:toWorld(ang(0,0,0)))    holoScale(X,vec(1))   holoColor(X,vec(255)) 
    Wheel_2 = X    
    X++
    holoCreate(X)   holoPos(X,Base:toWorld(vec(-100,0,0)))
    holoParent(X,Base)   holoModel(X,"models/unionssteamkits/ps-4_driving_wheel.mdl")
    holoAng(X,Base:toWorld(ang(0,0,0)))    holoScale(X,vec(1))   holoColor(X,vec(255))  
    Wheel_3 = X
    
    #Side Rod Left
    X++ 
    holoCreate(X, Base:toWorld(vec(84.5,0,0)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(X, Base) 
    SideRod_L = X    
    X++
    holoCreate(X, Base:toWorld(vec(84.5,0,-2)), vec(1), Base:toWorld(ang(0,0,0)))
    holoModel(X, "models/unionssteamkits/ps-4_rod_sides_l.mdl") holoMaterial(X,RodMaterial)
    holoMaterial(X, RodMaterial) holoColor(X, RodColor) holoParent(X, SideRod_L)
    
    #Side Rod Right
    X++ 
    holoCreate(X, Base:toWorld(vec(84.5,0,0)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(X, Base) 
    SideRod_R = X    
    X++
    holoCreate(X, Base:toWorld(vec(84.5,0,0)), vec(1), Base:toWorld(ang(0,0,0)))
    holoModel(X, "models/unionssteamkits/ps-4_rod_sides_r.mdl") holoMaterial(X,RodMaterial)
    holoMaterial(X, RodMaterial) holoColor(X, RodColor) holoParent(X, SideRod_R)   
    
    #Main Rod Left
    X++ 
    holoCreate(X, Base:toWorld(vec(0,0,0)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(X, Base)
    MainRod_L = X   
    X++
    holoCreate(X, Base:toWorld(vec(0,-1,0)), vec(1), Base:toWorld(ang(0,0,0)))
    holoModel(X, "models/unionssteamkits/ps-4_rod_Mainrod_b.mdl") holoMaterial(X,RodMaterial)
    holoMaterial(X, RodMaterial) holoColor(X, RodColor) holoParent(X, MainRod_L) 
        
    #Crosshead Left
    X++ 
    holoCreate(X, Base:toWorld(vec(0,0,0)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(X, Base)
    Crosshead_L = X     
    X++
    holoCreate(X, Base:toWorld(vec(-4,1,0)), vec(1), Base:toWorld(ang(0,0,0)))
    holoModel(X, "models/unionssteamkits/ps-4_rod_crosshead_l.mdl") holoMaterial(X,RodMaterial)
    holoMaterial(X, RodMaterial) holoColor(X, RodColor) holoParent(X, Crosshead_L)              
    
    #Main Rod Right
    X++ 
    holoCreate(X, Base:toWorld(vec(0,0,0)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(X, Base)
    MainRod_R = X   
    X++
    holoCreate(X, Base:toWorld(vec(0,1,0)), vec(1), Base:toWorld(ang(0,0,180)))
    holoModel(X, "models/unionssteamkits/ps-4_rod_Mainrod_b.mdl") holoMaterial(X,RodMaterial)
    holoMaterial(X, RodMaterial) holoColor(X, RodColor) holoParent(X, MainRod_R) 
        
    #Crosshead Right
    X++ 
    holoCreate(X, Base:toWorld(vec(0,0,0)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(X, Base)
    Crosshead_R = X     
    X++
    holoCreate(X, Base:toWorld(vec(-4,0,0)), vec(1), Base:toWorld(ang(0,0,0)))
    holoModel(X, "models/unionssteamkits/ps-4_rod_crosshead_r.mdl") holoMaterial(X,RodMaterial)
    holoMaterial(X, RodMaterial) holoColor(X, RodColor) holoParent(X, Crosshead_R)     
    
    X++
    #Left Eccentric crank
    holoCreate(X, Base:toWorld(vec(0,-65,-RodRadius)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(X, Wheel_1)
    EccentricCrank_L = X    
    X++
    holoCreate(X, Base:toWorld(vec(0,-60,-18)), vec(1), Base:toWorld(ang(0,0,0)))
    holoModel(X, "models/unionssteamkits/ps-4_rods_eccentriccrank_b.mdl") holoMaterial(X,RodMaterial)
    holoMaterial(X, RodMaterial) holoColor(X, RodColor) holoParent(X, EccentricCrank_L)     
    
    #Left Eccentric Rod
    X++
    holoCreate(X, Base:toWorld(vec(-12,-60,2)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(X, EccentricCrank_L)
    EccentricRod_L = X 
    X++
    holoCreate(X, Base:toWorld(vec(-63.2,-66.5,1)), vec(1,1,1), Base:toWorld(ang(-8,0,0)))
    holoModel(X, "models/unionssteamkits/ps-4_rods_eccentricrod_b.mdl")
    holoMaterial(X, RodMaterial) holoColor(X, RodColor)
    holoParent(X, EccentricRod_L) 
    
    #Left Expansion Plate Link
    X++
    holoCreate(X, Base:toWorld(vec(105,60,35)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(X, Base)    
    MainExpansionLink_L = X        
    
    #Left Expansion Plate 
    X++
    holoCreate(X, Base:toWorld(vec(105,60,50)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(X, MainExpansionLink_L)    
    ExpansionPlate_L = X   
    
    #Left Expansion Bottom
    X++
    holoCreate(X, Base:toWorld(vec(127,60,20)), vec(ParentScale), Base:toWorld(ang(0,0,0)))
    holoParent(X, ExpansionPlate_L)
    ExpansionRodBottom_L = X        
    
    
    
                                                          
    WheelRotation = 0
    function void updateRods(Speed:number) {
        if(Speed != 0) {
            WheelRotation += Speed * -1
            if(WheelRotation > 360) {
                WheelRotation = WheelRotation - 360
            }elseif(WheelRotation < -360) {
                WheelRotation = WheelRotation + 360
            }
            holoAng(Wheel_1, Base:toWorld(ang(WheelRotation,0,0)))
            holoAng(Wheel_2, Base:toWorld(ang(WheelRotation,0,0)))
            holoAng(Wheel_3, Base:toWorld(ang(WheelRotation,0,0)))
            #left
            #main rod
            local MainRodCos = cos(WheelRotation+90)*RodRadius
            local MainRodSin = sin(WheelRotation+90)*RodRadius
            holoPos(SideRod_L, Base:toWorld(vec(0,-48,0) + vec(MainRodCos,0,-MainRodSin)))
            holoPos(MainRod_L, Base:toWorld(vec(0,-54,-2) + vec(MainRodCos,0,-MainRodSin)))
            holoPos(Crosshead_L, Base:toWorld(vec(-150,-57,-1) + vec(MainRodCos,0,0)))
            local Crosshead_Ang = (holoEntity(MainRod_L):pos() - holoEntity(Crosshead_L):pos()):toAngle()
            holoAng(MainRod_L, Crosshead_Ang)
            #expansion plate
            local EccentricCos = cos(WheelRotation-25)*(RodRadius*2)
            holoAng(ExpansionPlate_L, Base:toWorld(ang(-EccentricCos/-3,0,0)))
            
            #right
            MainRodCos = cos(WheelRotation)*-RodRadius
            MainRodSin = sin(WheelRotation)*-RodRadius
            holoPos(SideRod_R, Base:toWorld(vec(0,48,0) + vec(MainRodCos,0,-MainRodSin)))
            holoPos(MainRod_R, Base:toWorld(vec(0,54,0) + vec(MainRodCos,0,-MainRodSin)))
            holoPos(Crosshead_R, Base:toWorld(vec(-150,57,-1) + vec(MainRodCos,0,0)))
            Crosshead_Ang = (holoEntity(MainRod_R):pos() - holoEntity(Crosshead_R):pos()):toAngle()
            holoAng(MainRod_R, Crosshead_Ang)
            #expansion plate
            EccentricCos = cos(WheelRotation+288)*(RodRadius*3.4)
            holoAng(ExpansionPlate_R, Base:toWorld(ang(-EccentricCos/3,0,0)))
            EccentricRod_Ang = (holoEntity(EccentricRod_R):pos() - holoEntity(ExpansionRodBottom_R):pos()):toAngle()
            holoAng(EccentricRod_R, EccentricRod_Ang)
            MainExpansionLink_Ang = (holoEntity(LiftingArm_D):pos() - holoEntity(MainExpansionLink_L):pos()):toAngle()
            holoAng(LiftingArm_D, MainExpansionLink_Ang)
            MainExpansionLink_Ang_2 = (holoEntity(LiftingArm_D_2):pos() - holoEntity(MainExpansionLink_R):pos()):toAngle()
            holoAng(LiftingArm_D_2, MainExpansionLink_Ang)
        } 
        local ReverserChanged = changed(Reverser)
        if(ReverserChanged | (!ReverserChanged & Speed != 0)) {
            if(ReverserChanged) {
                if(Reverser>0.1){ReverserA=Reverser*-1} if(Reverser<-0.1){ReverserA=Reverser*1}
                local LiftingOffset = -16 * -Reverser 
                holoAng(LiftingArm, Base:toWorld(ang(LiftingOffset,0,90)))
                holoAng(LiftingArm_B, Base:toWorld(ang(LiftingOffset,0,90)))
                holoPos(LiftingArm_C, Base:toWorld(vec(LiftingOffset/1.3+86,70,74+ReverserA)))
                holoPos(MainExpansionLink_L, Base:toWorld(vec(-112+Reverser*4,-70,38)))
                holoAng(MainExpansionLink_L, Base:toWorld(ang(-LiftingOffset/8,0,0)))
                holoAng(MainExpansionLink_R, Base:toWorld(ang(-LiftingOffset/8,0,0)))
                holoPos(MainExpansionLink_R, Base:toWorld(vec(112+-Reverser*4,-70,38)))
                local EccentricRod_Ang = (holoEntity(EccentricRod_L):pos() - holoEntity(ExpansionRodBottom_L):pos()):toAngle()
                holoAng(EccentricRod_L, EccentricRod_Ang)
                local EccentricRod_Ang_2 = (holoEntity(EccentricRod_R):pos() - holoEntity(ExpansionRodBottom_R):pos()):toAngle()
                holoAng(EccentricRod_R, EccentricRod_Ang_2)                                
            }
        if(Reverser>0.1){Noot=2} if(Reverser<-0.1){Noot=-2}
            #left
            local ValveStemAmount = sin(WheelRotation+(90*Reverser)) * (Noot*abs(Reverser))
            holoPos(ValveStem_L, Base:toWorld(vec(135,70,38)-vec(ValveStemAmount - ((0.5) * -Reverser),0,0)))
            local EccentricRod_Ang = (holoEntity(EccentricRod_L):pos() - holoEntity(ExpansionRodBottom_L):pos()):toAngle()
            holoAng(EccentricRod_L, EccentricRod_Ang)           
            
            holoPos(MainExpansionLink_L, Base:toWorld(vec(-112+-Reverser*4,-62,38+cos(WheelRotation+1)-ReverserA*4)))
            holoPos(MainExpansionLink_R, Base:toWorld(vec(-112+-Reverser*4,-62,38+cos(WheelRotation+1)-ReverserA*4)))
            holoAng(Combination_L, Base:toWorld(ang((sin(WheelRotation-(8*Reverser))*20)+(-Reverser-4),0,0)))
            local UnionLink_Ang = (holoEntity(UnionLink_L):pos() - holoEntity(CombinationEnd_L):pos()):toAngle()
            holoAng(UnionLink_L, UnionLink_Ang)
            local LiftingLink_Ang = (holoEntity(LiftingLink_L):pos() - holoEntity(LiftingLinkEnd_L):pos()):toAngle()
            holoAng(LiftingLink_L, LiftingLink_Ang)
            #right
            ExpansionLink_Ang = (holoEntity(ExpansionLink_R):pos() - holoEntity(Combination_R):pos()):toAngle()
            holoAng(ExpansionLink_R, ExpansionLink_Ang)
            ValveStemAmount = sin(WheelRotation+(90*Reverser)-90) * (Noot*abs(Reverser))
            holoPos(ValveStem_R, Base:toWorld(vec(135,-70,38)-vec(ValveStemAmount - ((0.5) * Reverser),0,0)))
            holoAng(Combination_R, Base:toWorld(ang((sin(WheelRotation+250+(8*Reverser))*20)+(-Reverser-4),0,0)))
            GearRod_Ang = (holoEntity(Gearlifting_L):pos() - holoEntity(ExpansionPlate_L):pos()):toAngle()
            holoAng(Gearlifting_L, GearRod_Ang)
            GearRod_Ang_2 = (holoEntity(Gearlifting_R):pos() - holoEntity(ExpansionPlate_R):pos()):toAngle()
            holoAng(Gearlifting_R, GearRod_Ang_2)
            UnionLink_Ang = (holoEntity(UnionLink_R):pos() - holoEntity(CombinationEnd_R):pos()):toAngle()
            holoAng(UnionLink_R, UnionLink_Ang)
            LiftingLink_Ang = (holoEntity(LiftingLink_R):pos() - holoEntity(LiftingLinkEnd_R):pos()):toAngle()
            holoAng(LiftingLink_R, LiftingLink_Ang)
            
                    
            

        }
    }
    updateRods(1)
}

interval(50)
if(clk()) {
    Speed = round(Base:velL():x() / -9.4)
    updateRods(Speed)
}

